{"version":3,"sources":["AssetTracker.js","App.js","reportWebVitals.js","index.js"],"names":["appClient","Stitch","initializeDefaultAppClient","svcClient","getServiceClient","RemoteMongoClient","factory","dateSorter","a","b","moment","date","coinUnitMap","algo","monetary","unit","fractional","decimalPlaces","band","bch","btc","celo","comp","dash","dot","eth","grt","ksm","ltc","mkr","nu","xlm","xrp","zec","AssetTracker","transactions","quotes","this","currencies","Set","map","quote","fiat","sort","earliestDate","latestDate","assets","tx","asset","balanceAtDate","filter","reduce","accumulator","plus","BigNumber","amount","interval","balances","Array","from","length","v","i","Date","valueOf","toISOString","slice","Object","fromEntries","close","setHours","balance","coin","times","open","dividedBy","toNumber","latestBalance","pop","name","value","gistId","Promise","resolve","reject","fetch","then","response","json","gist","keys","files","_filename","endsWith","JSON","parse","content","_transactions","_transaction","includes","auth","loginWithCredential","AnonymousCredential","db","collection","find","$and","$in","$gte","$lte","asArray","catch","error","cookies","Cookies","colors","default","CustomToolTip","props","active","payload","label","currency","style","backgroundColor","padding","border","width","colSpan","format","toLowerCase","x","item","color","className","Intl","NumberFormat","toUpperCase","acc","CustomPieLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","fill","index","RADIAN","Math","PI","radiusForValueLabel","xForValueLabel","cos","yForValueLabel","sin","radiusForPercentLabel","xForPercentLabel","yForPercentLabel","y","textAnchor","dominantBaseline","toFixed","getHistoricalValue","App","useState","to","dateRange","setDateRange","get","setCurrency","window","location","href","match","split","setGistId","undefined","assetTracker","setAssetTracker","useEffect","set","path","fromGist","console","Container","fluid","Navbar","bg","variant","Brand","Nav","Form","inline","Control","type","size","disabled","onChange","event","target","_dateRange","defaultValue","placeholder","as","Row","Col","sm","ResponsiveContainer","minHeight","PieChart","Pie","data","dataKey","Cell","LineChart","isBetween","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","tick","fontSize","tickFormatter","YAxis","Tooltip","Legend","Line","stroke","Table","striped","bordered","hover","transaction","key","note","marginRight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.813a8383.chunk.js","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport moment from 'moment';\nimport {\n  Stitch,\n  AnonymousCredential,\n  RemoteMongoClient\n} from 'mongodb-stitch-browser-sdk';\n\nconst appClient = Stitch.initializeDefaultAppClient('grenade-tnats');\nconst svcClient = appClient.getServiceClient(RemoteMongoClient.factory, 'mongodb-atlas-grenade-stitch');\n\nconst dateSorter = (a, b) => (\n    (moment(a.date) < moment(b.date))\n        ? -1\n        : (moment(a.date) > moment(b.date))\n            ? 1\n            : 0\n);\n\nconst coinUnitMap = {\n    algo: {\n        monetary: {\n            unit: 'algo',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    band: {\n        monetary: {\n            unit: 'band',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    bch: {\n        monetary: {\n            unit: 'bch',\n        },\n        fractional: {\n            unit: 'satoshi',\n            decimalPlaces: 8,\n        },\n    },\n    btc: {\n        monetary: {\n            unit: 'btc',\n        },\n        fractional: {\n            unit: 'satoshi',\n            decimalPlaces: 8,\n        },\n    },\n    celo: {\n        monetary: {\n            unit: 'celo',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    comp: {\n        monetary: {\n            unit: 'comp',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    dash: {\n        monetary: {\n            unit: 'dash',\n        },\n        fractional: {\n            unit: 'duff',\n            decimalPlaces: 8,\n        },\n    },\n    dot: {\n        monetary: {\n            unit: 'dot',\n        },\n        fractional: {\n            unit: 'planck',\n            decimalPlaces: 10,\n        },\n    },\n    eth: {\n        monetary: {\n            unit: 'eth',\n        },\n        fractional: {\n            unit: 'wei',\n            decimalPlaces: 18,\n        },\n    },\n    grt: {\n        monetary: {\n            unit: 'grt',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    ksm: {\n        monetary: {\n            unit: 'ksm',\n        },\n        fractional: {\n            unit: 'planck',\n            decimalPlaces: 12,\n        },\n    },\n    ltc: {\n        monetary: {\n            unit: 'ltc',\n        },\n        fractional: {\n            unit: 'litoshi',\n            decimalPlaces: 8,\n        },\n    },\n    mkr: {\n        monetary: {\n            unit: 'mkr',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    nu: {\n        monetary: {\n            unit: 'nu',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    xlm: {\n        monetary: {\n            unit: 'xlm',\n        },\n        fractional: {\n            unit: 'stroop',\n            decimalPlaces: 7,\n        },\n    },\n    xrp: {\n        monetary: {\n            unit: 'xrp',\n        },\n        fractional: {\n            unit: 'drop',\n            decimalPlaces: 6,\n        },\n    },\n    zec: {\n        monetary: {\n            unit: 'zec',\n        },\n        fractional: {\n            unit: 'zatoshi',\n            decimalPlaces: 8,\n        },\n    },\n};\n\nexport default class AssetTracker {\n    constructor(transactions, quotes) {\n        this.quotes = quotes;\n        this.currencies = [...new Set(this.quotes.map(quote => quote.fiat))].sort();;\n        this.transactions = transactions.sort(dateSorter);\n        this.earliestDate = moment(this.transactions[0].date);\n        this.latestDate = moment();\n        this.assets = [...new Set(this.transactions.map(tx => tx.asset))].sort();\n        this.balanceAtDate = (asset, date) => this.transactions\n            .filter(tx => ((tx.asset === asset) && (moment(tx.date) <= date)))\n            .reduce((accumulator, tx) => accumulator.plus(new BigNumber(tx.amount)), new BigNumber(0));\n        const interval = 1000 * 60 * 60 * 24; // one day\n        this.balances = Array.from(\n            { length: (((this.latestDate - this.earliestDate) / interval) + 1) },\n            (v, i) => new Date(this.earliestDate.valueOf() + (interval * i)).toISOString().slice(0, 10)\n        ).map(date => ({\n            // todo: filter out assets where balance is always zero\n            ...Object.fromEntries(this.assets.map(asset => {\n                const close = new Date(date);\n                close.setHours(23, 59, 59);\n                const balance = this.balanceAtDate(asset, close);\n                return [\n                    asset,\n                    {\n                        ...Object.fromEntries(quotes.filter(quote => ((quote.coin === asset) && (quote.date === date))).map(quote => [\n                            quote.fiat,\n                            balance.times(BigNumber(quote.open.amount).plus(BigNumber(quote.close.amount)).dividedBy(BigNumber(2))).decimalPlaces(2).toNumber() || BigNumber(0).toNumber()\n                        ])),\n                        [asset]: balance.toNumber(),\n                    }\n                ];\n            })),\n            date,\n        }));\n        const latestBalance = [...this.balances].pop();\n        this.latestBalance = this.assets\n          .filter(a => !!latestBalance[a][this.currencies[0]])\n          .map(a => ({\n            name: a,\n            value: {\n                [a]: latestBalance[a][a],\n                [this.currencies[0]]: latestBalance[a][this.currencies[0]],\n            }\n          }));\n        \n    }\n\n    static fromGist(gistId) {\n        return new Promise((resolve , reject) => {\n            fetch(`https://api.github.com/gists/${gistId}`)\n                .then((response) => response.json())\n                .then((gist) => {\n                    const transactions = Object.keys(gist.files)\n                        .filter(_filename => _filename.endsWith('.json'))\n                        .map(_filename => JSON.parse(gist.files[_filename].content))\n                        .reduce((accumulator, _transactions) => [...accumulator, ..._transactions])\n                        .filter(_transaction => Object.keys(coinUnitMap).includes(_transaction.asset))\n                        .sort(dateSorter);\n                    const earliestDate = transactions[0].date.slice(0, 10);\n                    const latestDate = moment().toISOString().slice(0, 10);\n                    appClient.auth\n                        .loginWithCredential(new AnonymousCredential())\n                        .then(() => {\n                            svcClient.db('grenade')\n                                .collection('quote')\n                                .find(\n                                    {\n                                        $and: [\n                                            {\n                                                coin: {\n                                                    $in: [...new Set(transactions.map(tx => tx.asset))]\n                                                }\n                                            },\n                                            {\n                                                date: {\n                                                    $gte: earliestDate\n                                                }\n                                            },\n                                            {\n                                                date: {\n                                                    $lte: latestDate\n                                                }\n                                            }\n                                        ]\n                                    }\n                                )\n                                .asArray()\n                                .then(quotes => {\n                                    resolve(new AssetTracker(transactions, quotes));\n                                });\n                        });\n                })\n                .catch((error) => {\n                    reject(error);\n                });          \n        });\n    }\n};","import React, { useState, useEffect } from 'react';\nimport BigNumber from \"bignumber.js\";\nimport Cookies from 'universal-cookie';\nimport moment from 'moment';\n\n// bootstrap\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Row from 'react-bootstrap/Row';\nimport Table from 'react-bootstrap/Table';\n\n// recharts\nimport { PieChart, Pie, Cell, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport AssetTracker from './AssetTracker';\n\nconst cookies = new Cookies();\nconst colors = {\n  bch: '#8dc351',\n  btc: '#f7931a',\n  dash: '#008ce7',\n  dot: '#e71081',\n  eth: '#444eec',\n  ksm: '#8015ab',\n  ltc: '#345d9d',\n  xlm: '#14b6e7',\n  xrp: '#23292f',\n  zec: '#ecb244',\n  default: '#cccccc',\n};\n\nconst CustomToolTip = props => {\n  const { active, payload, label, currency } = props;\n  if (!active || !payload) {\n    return null;\n  }\n  return (\n    <div style={{\n      backgroundColor: '#ffffff',\n      padding: '1em',\n      border: '1px solid #cccccc',\n    }}>\n      <table style={{width: '100%'}}>\n        <thead>\n          <tr>\n            <th colSpan=\"2\">\n              {moment(label).format(\"MMMM Do, YYYY\").toLowerCase()}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            payload.filter(x => x.value > 0).map((item) => (\n              <tr key={item.name} style={{ color: (colors[item.name] || colors['default']) }}>\n                <td>\n                  {item.name}\n                </td>\n                <td className=\"text-right\">\n                  {Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(item.value)}\n                </td>\n              </tr>\n            ))\n          }\n        </tbody>\n        <tfoot>\n          <tr>\n            <td>\n              total\n            </td>\n            <td className=\"text-right\">\n              {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(payload.reduce((acc, item) => acc + (item.value || 0), 0))}\n            </td>\n          </tr>\n        </tfoot>\n      </table>\n    </div>\n  );\n};\n\nconst CustomPieLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index, fill, asset, currency }) => {\n  const RADIAN = Math.PI / 180;\n\n  const radiusForValueLabel = innerRadius + (outerRadius - innerRadius) * 1.5;\n  const xForValueLabel = cx + radiusForValueLabel * Math.cos(-midAngle * RADIAN);\n  const yForValueLabel = cy + radiusForValueLabel * Math.sin(-midAngle * RADIAN);\n\n  const radiusForPercentLabel = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const xForPercentLabel = cx + radiusForPercentLabel * Math.cos(-midAngle * RADIAN);\n  const yForPercentLabel = cy + radiusForPercentLabel * Math.sin(-midAngle * RADIAN);\n  return (\n    <>\n      <text x={xForValueLabel} y={yForValueLabel} fill={fill} textAnchor={xForValueLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        {`${asset.name} ${asset.value[asset.name]} (${new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(asset.value[currency])})`}\n      </text>\n      <text x={xForPercentLabel} y={yForPercentLabel} fill=\"white\" textAnchor={xForPercentLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    </>\n  );\n};\n\nfunction getHistoricalValue(amount, asset, currency, date, quotes) {\n  const quote = quotes.find(quote => ((quote.fiat === currency) && (quote.coin === asset) && (quote.date === date.slice(0, 10))));\n  return BigNumber(amount).times(BigNumber(quote.open.amount).plus(BigNumber(quote.close.amount)).dividedBy(BigNumber(2))).decimalPlaces(2).toNumber();\n}\n\nfunction App() {\n  const [dateRange, setDateRange] = useState({ from: moment('2020-11-11').toISOString().slice(0, 10), to: moment().toISOString().slice(0, 10) });\n  const [currency, setCurrency] = useState(cookies.get('currency') || 'eur');\n  const [gistId, setGistId] = useState(window.location.href.match(/#[a-f0-9]{32}$/) ? window.location.href.split('#').pop() : cookies.get('gist') || '8272a8540d65584f16a2d3f6b9c34e4c');\n  const [assetTracker, setAssetTracker] = useState(undefined);\n  useEffect(() => {\n    if(!!currency && currency.match(/^[a-z]{3}$/) && cookies.get('currency') !== currency) {\n      cookies.set('currency', currency, { path: '/' });\n    }\n  }, [currency]);\n  useEffect(() => {\n    if(!!gistId && gistId.match(/^[a-f0-9]{32}$/) && cookies.get('gist') !== gistId) {\n      cookies.set('gist', gistId, { path: '/' });\n    }\n  }, [gistId]);\n  useEffect(() => {\n    if (!!gistId && gistId.match(/^[a-f0-9]{32}$/)) {\n      AssetTracker\n        .fromGist(gistId)\n        .then(setAssetTracker)\n        .catch(console.error);\n    }\n  }, [gistId]);\n  return (\n    <Container fluid>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#\">don&rsquo;t panic</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n        </Nav>\n        <Form inline>\n          <Form.Control\n            type=\"text\"\n            style={{width: '7em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            value={dateRange.from /* todo: figure out why moment removes a day... */}\n            onChange={\n              (event) => {\n                const from = event.target.value;\n                if (from.match(/^20[12][0-9]-[01][0-9]-[0123][0-9]$/)) {\n                  setDateRange(_dateRange => ({\n                    ..._dateRange,\n                    from\n                  }));\n                }\n              }\n            } />\n          <Form.Control\n            type=\"text\"\n            style={{width: '7em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={moment(dateRange.to).toISOString().slice(0, 10)}\n            onChange={\n              (event) => {\n                const to = event.target.value;\n                if (to.match(/^20[12][0-9]-[01][0-9]-[0123][0-9]$/)) {\n                  setDateRange(_dateRange => ({\n                    ..._dateRange,\n                    to\n                  }));\n                }\n              }\n            } />\n          <Form.Control\n            type=\"text\"\n            placeholder=\"gist id\"\n            style={{width: '19em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={gistId}\n            onChange={\n              (event) => {\n                const gistId = event.target.value;\n                if (gistId.match(/^[a-f0-9]{32}$/)) {\n                  setGistId(gistId);\n                }\n              }\n            } />\n          <Form.Control\n            as=\"select\"\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={currency}\n            onChange={\n              (event) => {\n                const currency = event.target.value;\n                if (currency.match(/^[a-f]{3}$/)) {\n                  setCurrency(currency);\n                }\n              }\n            }>\n            <option>eur</option>\n            <option>usd</option>\n          </Form.Control>\n        </Form>\n      </Navbar>\n      <Row>\n        <Col sm={4}>\n          {\n            (!!assetTracker && !!assetTracker.latestBalance)\n              ? (\n                  <ResponsiveContainer width=\"100%\" minHeight=\"500px\">\n                    <PieChart>\n                      <Pie\n                        data={assetTracker.latestBalance}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        label={CustomPieLabel}\n                        outerRadius={80}\n                        dataKey={`value.${currency}`}>\n                        {\n                          assetTracker.latestBalance.map((item) => (\n                            <Cell key={item.name} fill={colors[item.name]} asset={{ name: item.name, value: { [currency]: item.value[currency], [item.name]: item.value[item.name] } }} currency={currency} />\n                          ))\n                        }\n                      </Pie>\n                    </PieChart>\n                  </ResponsiveContainer>\n                )\n              : null\n          }\n        </Col>\n        <Col sm={8}>\n          {\n            (!!assetTracker && !!assetTracker.balances.length)\n              ? (\n                  <ResponsiveContainer width=\"100%\" minHeight=\"500px\">\n                    <LineChart\n                      data={assetTracker.balances.filter(balance => moment(balance.date).isBetween(moment(dateRange.from), moment(dateRange.to)))}\n                      margin={{ top: 50, right: 10, left: 10, bottom: 10 }} >\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis\n                        dataKey=\"date\"\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={tick => moment(tick).format('MMM D').toLowerCase()} />\n                      <YAxis\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={tick => new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(tick)} />\n                      <Tooltip content={<CustomToolTip />} currency={currency} />\n                      <Legend />\n                      {\n                        assetTracker.assets.map(asset => (\n                          <Line type=\"monotone\" name={`${asset}`} dataKey={`${asset}.${currency}`} dot={false} stroke={colors[asset] || colors['default']} key={asset} />\n                        ))\n                      }\n                    </LineChart>\n                  </ResponsiveContainer>\n                )\n              : null\n          }\n        </Col>\n      </Row>\n      <Row>\n        <Table striped bordered hover size=\"sm\" variant=\"dark\" style={{margin: '50px 10px 10px 10px'}}>\n          <thead>\n            <tr>\n              <th colSpan=\"4\" className=\"text-right\">\n                transaction history\n              </th>\n            </tr>\n            <tr>\n              <th>\n                date\n              </th>\n              <th>\n                note\n              </th>\n              <th className=\"text-right\">\n                asset amount\n              </th>\n              <th className=\"text-right\">\n                {currency} amount\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              (!!assetTracker && !!assetTracker.transactions.length)\n                ? assetTracker.transactions.filter(transaction => moment(transaction.date).isBetween(moment(dateRange.from), moment(dateRange.to))).map((tx, key) => (\n                    <tr key={key}>\n                      <td>\n                        {tx.date}\n                      </td>\n                      <td>\n                        {tx.note}\n                      </td>\n                      <td className=\"text-right\">\n                        {tx.asset} {tx.amount}\n                      </td>\n                      <td className=\"text-right\">\n                        {\n                          new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(\n                            getHistoricalValue(tx.amount, tx.asset, currency, tx.date, assetTracker.quotes)\n                          )\n                        }\n                      </td>\n                    </tr>\n                  ))\n                : null\n            }\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        {\n          (!!assetTracker && !!assetTracker.balances.length)\n            ? (\n                <Table striped bordered hover size=\"sm\" variant=\"dark\" style={{margin: '50px 10px 10px 10px'}}>\n                  <thead>\n                    <tr>\n                      <th colSpan={(assetTracker.assets.length + 2)} className=\"text-right\">\n                        balance history\n                      </th>\n                    </tr>\n                    <tr>\n                      <th>date</th>\n                      {\n                        assetTracker.assets.map(asset => (\n                          <th key={asset} className=\"text-right\">\n                            {asset}\n                          </th>\n                        ))\n                      }\n                      <th className=\"text-right\">total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      assetTracker.balances.filter(balance => moment(balance.date).isBetween(moment(dateRange.from), moment(dateRange.to))).map((balance) => (\n                        <tr key={balance.date}>\n                          <th>{balance.date}</th>\n                          {\n                            assetTracker.assets.map(asset => (\n                              <td key={`${balance.date}-${asset}`} className=\"text-right\">\n                                <span className=\"text-muted\" style={{marginRight: '1em'}}>\n                                  {balance[asset][asset]}\n                                </span>\n                                {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(balance[asset][currency] || 0)}\n                              </td>\n                            ))\n                          }\n                          <td className=\"text-right\">\n                            {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(assetTracker.assets.reduce((acc, asset) => acc + (balance[asset][currency] || 0), 0))}\n                          </td>\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              )\n            : null\n        }\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}