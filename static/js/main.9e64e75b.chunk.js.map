{"version":3,"sources":["AssetTracker.js","App.js","reportWebVitals.js","index.js"],"names":["appClient","Stitch","initializeDefaultAppClient","svcClient","getServiceClient","RemoteMongoClient","factory","dateSorter","a","b","moment","date","coinUnitMap","algo","monetary","unit","fractional","decimalPlaces","band","bch","btc","celo","comp","dash","dot","eth","grt","ksm","ltc","mkr","nu","xlm","xrp","zec","AssetTracker","transactions","quotes","this","currencies","Set","map","quote","fiat","sort","earliestDate","utcOffset","startOf","toISOString","slice","latestDate","endOf","console","log","assets","tx","asset","balanceAtDate","filter","reduce","accumulator","plus","BigNumber","amount","balances","Array","from","length","diff","v","i","add","Object","fromEntries","balance","coin","times","open","close","dividedBy","toNumber","latestBalance","pop","name","value","gistId","Promise","resolve","reject","fetch","then","response","json","gist","keys","files","_filename","endsWith","JSON","parse","content","_transactions","_transaction","includes","auth","loginWithCredential","AnonymousCredential","db","collection","find","$and","$in","$gte","$lte","asArray","catch","error","cookies","Cookies","colors","default","CustomToolTip","props","active","payload","label","currency","style","backgroundColor","padding","border","width","colSpan","format","toLowerCase","x","item","color","className","Intl","NumberFormat","toUpperCase","acc","CustomPieLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","fill","index","RADIAN","Math","PI","radiusForCoinValueLabel","xForCoinValueLabel","cos","yForCoinValueLabel","sin","radiusForFiatValueLabel","xForFiatValueLabel","yForFiatValueLabel","radiusForPercentLabel","xForPercentLabel","yForPercentLabel","y","textAnchor","dominantBaseline","toFixed","getHistoricalValue","App","useState","to","dateRange","setDateRange","get","setCurrency","window","location","href","match","split","setGistId","undefined","assetTracker","setAssetTracker","useEffect","set","path","fromGist","Container","fluid","Navbar","bg","variant","Brand","Nav","Form","inline","Control","type","size","disabled","onChange","event","target","_dateRange","defaultValue","placeholder","as","Row","Col","sm","ResponsiveContainer","minHeight","PieChart","Pie","data","dataKey","Cell","Spinner","animation","LineChart","isBetween","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","tick","fontSize","tickFormatter","YAxis","Tooltip","Legend","Line","stroke","Table","striped","bordered","hover","transaction","key","note","marginRight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e64e75b.chunk.js","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport moment from 'moment';\nimport {\n  Stitch,\n  AnonymousCredential,\n  RemoteMongoClient\n} from 'mongodb-stitch-browser-sdk';\n\nconst appClient = Stitch.initializeDefaultAppClient('grenade-tnats');\nconst svcClient = appClient.getServiceClient(RemoteMongoClient.factory, 'mongodb-atlas-grenade-stitch');\n\nconst dateSorter = (a, b) => (\n    (moment(a.date) < moment(b.date))\n        ? -1\n        : (moment(a.date) > moment(b.date))\n            ? 1\n            : 0\n);\n\nconst coinUnitMap = {\n    algo: {\n        monetary: {\n            unit: 'algo',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    band: {\n        monetary: {\n            unit: 'band',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    bch: {\n        monetary: {\n            unit: 'bch',\n        },\n        fractional: {\n            unit: 'satoshi',\n            decimalPlaces: 8,\n        },\n    },\n    btc: {\n        monetary: {\n            unit: 'btc',\n        },\n        fractional: {\n            unit: 'satoshi',\n            decimalPlaces: 8,\n        },\n    },\n    celo: {\n        monetary: {\n            unit: 'celo',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    comp: {\n        monetary: {\n            unit: 'comp',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    dash: {\n        monetary: {\n            unit: 'dash',\n        },\n        fractional: {\n            unit: 'duff',\n            decimalPlaces: 8,\n        },\n    },\n    dot: {\n        monetary: {\n            unit: 'dot',\n        },\n        fractional: {\n            unit: 'planck',\n            decimalPlaces: 10,\n        },\n    },\n    eth: {\n        monetary: {\n            unit: 'eth',\n        },\n        fractional: {\n            unit: 'wei',\n            decimalPlaces: 18,\n        },\n    },\n    grt: {\n        monetary: {\n            unit: 'grt',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    ksm: {\n        monetary: {\n            unit: 'ksm',\n        },\n        fractional: {\n            unit: 'planck',\n            decimalPlaces: 12,\n        },\n    },\n    ltc: {\n        monetary: {\n            unit: 'ltc',\n        },\n        fractional: {\n            unit: 'litoshi',\n            decimalPlaces: 8,\n        },\n    },\n    mkr: {\n        monetary: {\n            unit: 'mkr',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    nu: {\n        monetary: {\n            unit: 'nu',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    xlm: {\n        monetary: {\n            unit: 'xlm',\n        },\n        fractional: {\n            unit: 'stroop',\n            decimalPlaces: 7,\n        },\n    },\n    xrp: {\n        monetary: {\n            unit: 'xrp',\n        },\n        fractional: {\n            unit: 'drop',\n            decimalPlaces: 6,\n        },\n    },\n    zec: {\n        monetary: {\n            unit: 'zec',\n        },\n        fractional: {\n            unit: 'zatoshi',\n            decimalPlaces: 8,\n        },\n    },\n};\n\nexport default class AssetTracker {\n    constructor(transactions, quotes) {\n        this.quotes = quotes;\n        this.currencies = [...new Set(this.quotes.map(quote => quote.fiat))].sort();;\n        this.transactions = transactions.sort(dateSorter);\n        this.earliestDate = moment(this.transactions[0].date).utcOffset(0).startOf('day').toISOString().slice(0, 10);\n        this.latestDate = moment().utcOffset(0).endOf('day').toISOString();\n        console.log(`earliest: ${this.earliestDate}, latest: ${this.latestDate}`);\n        this.assets = [...new Set(this.transactions.map(tx => tx.asset))].sort();\n        this.balanceAtDate = (asset, date) => this.transactions\n            .filter(tx => ((tx.asset === asset) && (moment(tx.date).utcOffset(0) <= date)))\n            .reduce((accumulator, tx) => accumulator.plus(new BigNumber(tx.amount)), new BigNumber(0));\n        this.balances = Array.from(\n            {\n                length: ((moment(this.latestDate).startOf('day').diff(moment(this.earliestDate).startOf('day'), 'days')) + 1)\n            },\n            (v, i) => moment(this.earliestDate).startOf('day').add(i, 'days').toISOString().slice(0, 10)\n        ).map(date => ({\n            // todo: filter out assets where balance is always zero\n            ...Object.fromEntries(this.assets.map(asset => {\n                const balance = this.balanceAtDate(asset, moment(date).utcOffset(0).endOf('day'));\n                return [\n                    asset,\n                    {\n                        ...Object.fromEntries(quotes.filter(quote => ((quote.coin === asset) && (quote.date === date))).map(quote => [\n                            quote.fiat,\n                            balance.times(BigNumber(quote.open.amount).plus(BigNumber(quote.close.amount)).dividedBy(BigNumber(2))).decimalPlaces(2).toNumber() || BigNumber(0).toNumber()\n                        ])),\n                        [asset]: balance.toNumber(),\n                    }\n                ];\n            })),\n            date,\n        }));\n        const latestBalance = [...this.balances].pop();\n        //console.log(latestBalance);\n        this.latestBalance = this.assets\n          .filter(a => !!latestBalance[a][this.currencies[0]])\n          .map(a => ({\n            name: a,\n            value: {\n                [a]: latestBalance[a][a],\n                [this.currencies[0]]: latestBalance[a][this.currencies[0]],\n            }\n          }));\n        \n    }\n\n    static fromGist(gistId) {\n        return new Promise((resolve , reject) => {\n            fetch(`https://api.github.com/gists/${gistId}`)\n                .then((response) => response.json())\n                .then((gist) => {\n                    const transactions = Object.keys(gist.files)\n                        .filter(_filename => _filename.endsWith('.json'))\n                        .map(_filename => JSON.parse(gist.files[_filename].content))\n                        .reduce((accumulator, _transactions) => [...accumulator, ..._transactions])\n                        .filter(_transaction => Object.keys(coinUnitMap).includes(_transaction.asset))\n                        .sort(dateSorter);\n                    const assets = [...new Set(transactions.map(tx => tx.asset))];\n                    const earliestDate = moment(transactions[0].date).utcOffset(0).startOf('day').toISOString().slice(0, 10);\n                    const latestDate = moment().utcOffset(0).endOf('day').toISOString().slice(0, 10);\n                    appClient.auth\n                        .loginWithCredential(new AnonymousCredential())\n                        .then(() => {\n                            svcClient.db('grenade')\n                                .collection('quote')\n                                .find(\n                                    {\n                                        $and: [\n                                            {\n                                                coin: {\n                                                    $in: assets\n                                                }\n                                            },\n                                            {\n                                                date: {\n                                                    $gte: earliestDate\n                                                }\n                                            },\n                                            {\n                                                date: {\n                                                    $lte: latestDate\n                                                }\n                                            }\n                                        ]\n                                    }\n                                )\n                                .asArray()\n                                .then(quotes => {\n                                    resolve(new AssetTracker(transactions, quotes));\n                                });\n                        });\n                })\n                .catch((error) => {\n                    reject(error);\n                });          \n        });\n    }\n};","import React, { useState, useEffect } from 'react';\nimport BigNumber from \"bignumber.js\";\nimport Cookies from 'universal-cookie';\nimport moment from 'moment';\n\n// bootstrap\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\n\n// recharts\nimport { PieChart, Pie, Cell, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport AssetTracker from './AssetTracker';\n\nconst cookies = new Cookies();\nconst colors = {\n  bch: '#8dc351',\n  btc: '#f7931a',\n  dash: '#008ce7',\n  dot: '#e71081',\n  eth: '#444eec',\n  ksm: '#8015ab',\n  ltc: '#345d9d',\n  xlm: '#14b6e7',\n  xrp: '#23292f',\n  zec: '#ecb244',\n  default: '#cccccc',\n};\n\nconst CustomToolTip = props => {\n  const { active, payload, label, currency } = props;\n  if (!active || !payload) {\n    return null;\n  }\n  return (\n    <div style={{\n      backgroundColor: '#ffffff',\n      padding: '1em',\n      border: '1px solid #cccccc',\n    }}>\n      <table style={{width: '100%'}}>\n        <thead>\n          <tr>\n            <th colSpan=\"2\">\n              {moment(label).format(\"MMMM Do, YYYY\").toLowerCase()}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            payload.filter(x => x.value > 0).map((item) => (\n              <tr key={item.name} style={{ color: (colors[item.name] || colors['default']) }}>\n                <td>\n                  {item.name}\n                </td>\n                <td className=\"text-right\">\n                  {Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(item.value)}\n                </td>\n              </tr>\n            ))\n          }\n        </tbody>\n        <tfoot>\n          <tr>\n            <td>\n              total\n            </td>\n            <td className=\"text-right\">\n              {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(payload.reduce((acc, item) => acc + (item.value || 0), 0))}\n            </td>\n          </tr>\n        </tfoot>\n      </table>\n    </div>\n  );\n};\n\nconst CustomPieLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index, fill, asset, currency }) => {\n  const RADIAN = Math.PI / 180;\n\n  const radiusForCoinValueLabel = innerRadius + (outerRadius - innerRadius) * 1.5;\n  const xForCoinValueLabel = cx + radiusForCoinValueLabel * Math.cos(-midAngle * RADIAN);\n  const yForCoinValueLabel = cy + radiusForCoinValueLabel * Math.sin(-midAngle * RADIAN);\n\n  const radiusForFiatValueLabel = innerRadius + (outerRadius - innerRadius) * 1.2;\n  const xForFiatValueLabel = cx + radiusForFiatValueLabel * Math.cos(-midAngle * RADIAN);\n  const yForFiatValueLabel = cy + radiusForFiatValueLabel * Math.sin(-midAngle * RADIAN);\n\n  const radiusForPercentLabel = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const xForPercentLabel = cx + radiusForPercentLabel * Math.cos(-midAngle * RADIAN);\n  const yForPercentLabel = cy + radiusForPercentLabel * Math.sin(-midAngle * RADIAN);\n  return (\n    <>\n      <text x={xForCoinValueLabel} y={yForCoinValueLabel} fill={fill} textAnchor={xForCoinValueLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        {asset.name} {asset.value[asset.name]}\n      </text>\n      <text x={xForFiatValueLabel} y={yForFiatValueLabel} fill={fill} textAnchor={xForFiatValueLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        ({new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(asset.value[currency])})\n      </text>\n      <text x={xForPercentLabel} y={yForPercentLabel} fill=\"white\" textAnchor={xForPercentLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    </>\n  );\n};\n\nfunction getHistoricalValue(amount, asset, currency, date, quotes) {\n  const quote = quotes.find(quote => ((quote.fiat === currency) && (quote.coin === asset) && (quote.date === date.slice(0, 10))));\n  if (!quote) {\n    console.error(`failed to find quote using args: amount: ${amount}, asset: ${asset}, currency: ${currency}, date: ${date}, quotes.length,: ${quotes.length}`);\n    return 0;\n  }\n  return BigNumber(amount).times(BigNumber(quote.open.amount).plus(BigNumber(quote.close.amount)).dividedBy(BigNumber(2))).decimalPlaces(2).toNumber();\n}\n\nfunction App() {\n  const [dateRange, setDateRange] = useState({ from: moment('2020-11-11').utcOffset(0).startOf('day'), to: moment().utcOffset(0).endOf('day') });\n  const [currency, setCurrency] = useState(cookies.get('currency') || 'eur');\n  const [gistId, setGistId] = useState(window.location.href.match(/#[a-f0-9]{32}$/) ? window.location.href.split('#').pop() : cookies.get('gist') || '8272a8540d65584f16a2d3f6b9c34e4c');\n  const [assetTracker, setAssetTracker] = useState(undefined);\n  useEffect(() => {\n    if(!!currency && currency.match(/^[a-z]{3}$/) && cookies.get('currency') !== currency) {\n      cookies.set('currency', currency, { path: '/' });\n    }\n  }, [currency]);\n  useEffect(() => {\n    if(!!gistId && gistId.match(/^[a-f0-9]{32}$/) && cookies.get('gist') !== gistId) {\n      cookies.set('gist', gistId, { path: '/' });\n    }\n  }, [gistId]);\n  useEffect(() => {\n    if (!!gistId && gistId.match(/^[a-f0-9]{32}$/)) {\n      AssetTracker\n        .fromGist(gistId)\n        .then(setAssetTracker)\n        .catch(console.error);\n    }\n  }, [gistId]);\n  return (\n    <Container fluid>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#\">don&rsquo;t panic</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n        </Nav>\n        <Form inline>\n          <Form.Control\n            type=\"text\"\n            style={{width: '7em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            value={dateRange.from /* todo: figure out why moment removes a day... */}\n            onChange={\n              (event) => {\n                const from = event.target.value;\n                if (from.match(/^20[12][0-9]-[01][0-9]-[0123][0-9]$/)) {\n                  setDateRange(_dateRange => ({\n                    ..._dateRange,\n                    from\n                  }));\n                }\n              }\n            } />\n          <Form.Control\n            type=\"text\"\n            style={{width: '7em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={moment(dateRange.to).toISOString().slice(0, 10)}\n            onChange={\n              (event) => {\n                const to = event.target.value;\n                if (to.match(/^20[12][0-9]-[01][0-9]-[0123][0-9]$/)) {\n                  setDateRange(_dateRange => ({\n                    ..._dateRange,\n                    to\n                  }));\n                }\n              }\n            } />\n          <Form.Control\n            type=\"text\"\n            placeholder=\"gist id\"\n            style={{width: '19em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={gistId}\n            onChange={\n              (event) => {\n                const gistId = event.target.value;\n                if (gistId.match(/^[a-f0-9]{32}$/)) {\n                  setGistId(gistId);\n                }\n              }\n            } />\n          <Form.Control\n            as=\"select\"\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={currency}\n            onChange={\n              (event) => {\n                const currency = event.target.value;\n                if (currency.match(/^[a-f]{3}$/)) {\n                  setCurrency(currency);\n                }\n              }\n            }>\n            <option>eur</option>\n            <option>usd</option>\n          </Form.Control>\n        </Form>\n      </Navbar>\n      <Row>\n        <Col sm={4}>\n          {\n            (!!assetTracker && !!assetTracker.latestBalance.length)\n              ? (\n                  <ResponsiveContainer width=\"100%\" minHeight=\"500px\">\n                    <PieChart>\n                      <Pie\n                        data={assetTracker.latestBalance}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        label={CustomPieLabel}\n                        outerRadius={80}\n                        dataKey={`value.${currency}`}>\n                        {\n                          assetTracker.latestBalance.map((item) => (\n                            <Cell key={item.name} fill={colors[item.name]} asset={{ name: item.name, value: { [currency]: item.value[currency], [item.name]: item.value[item.name] } }} currency={currency} />\n                          ))\n                        }\n                      </Pie>\n                    </PieChart>\n                  </ResponsiveContainer>\n                )\n              : (\n                  <Spinner animation=\"grow\" />\n                )\n          }\n        </Col>\n        <Col sm={8}>\n          {\n            (!!assetTracker && !!assetTracker.balances.length)\n              ? (\n                  <ResponsiveContainer width=\"100%\" minHeight=\"500px\">\n                    <LineChart\n                      data={assetTracker.balances.filter(balance => moment(balance.date).isBetween(dateRange.from, dateRange.to))}\n                      margin={{ top: 50, right: 10, left: 10, bottom: 10 }} >\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis\n                        dataKey=\"date\"\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={tick => moment(tick).format('MMM D').toLowerCase()} />\n                      <YAxis\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={tick => new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(tick)} />\n                      <Tooltip content={<CustomToolTip />} currency={currency} />\n                      <Legend />\n                      {\n                        assetTracker.assets.map(asset => (\n                          <Line type=\"monotone\" name={`${asset}`} dataKey={`${asset}.${currency}`} dot={false} stroke={colors[asset] || colors['default']} key={asset} />\n                        ))\n                      }\n                    </LineChart>\n                  </ResponsiveContainer>\n                )\n              : (\n                  <Spinner animation=\"grow\" />\n                )\n          }\n        </Col>\n      </Row>\n      <Row>\n        <Table striped bordered hover size=\"sm\" style={{margin: '50px 10px 10px 10px'}}>\n          <thead>\n            <tr>\n              <th colSpan=\"4\" className=\"text-right\">\n                transaction history\n              </th>\n            </tr>\n            <tr>\n              <th>\n                date\n              </th>\n              <th>\n                note\n              </th>\n              <th className=\"text-right\">\n                asset amount\n              </th>\n              <th className=\"text-right\">\n                {currency} amount\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              (!!assetTracker && !!assetTracker.transactions.length)\n                ? assetTracker.transactions.filter(transaction => moment(transaction.date).isBetween(dateRange.from, dateRange.to)).map((tx, key) => (\n                    <tr key={key}>\n                      <td>\n                        {tx.date}\n                      </td>\n                      <td>\n                        {tx.note}\n                      </td>\n                      <td className=\"text-right\">\n                        {tx.asset} {tx.amount}\n                      </td>\n                      <td className=\"text-right\">\n                        {\n                          new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(\n                            getHistoricalValue(tx.amount, tx.asset, currency, tx.date, assetTracker.quotes)\n                          )\n                        }\n                      </td>\n                    </tr>\n                  ))\n                : null\n            }\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        {\n          (!!assetTracker && !!assetTracker.balances.length)\n            ? (\n                <Table striped bordered hover size=\"sm\" style={{margin: '50px 10px 10px 10px'}}>\n                  <thead>\n                    <tr>\n                      <th colSpan={(assetTracker.assets.length + 2)} className=\"text-right\">\n                        balance history\n                      </th>\n                    </tr>\n                    <tr>\n                      <th>date</th>\n                      {\n                        assetTracker.assets.map(asset => (\n                          <th key={asset} className=\"text-right\">\n                            {asset}\n                          </th>\n                        ))\n                      }\n                      <th className=\"text-right\">total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      assetTracker.balances.filter(balance => moment(balance.date).isBetween(dateRange.from, dateRange.to)).map((balance) => (\n                        <tr key={balance.date}>\n                          <th>{balance.date}</th>\n                          {\n                            assetTracker.assets.map(asset => (\n                              <td key={`${balance.date}-${asset}`} className=\"text-right\">\n                                <span className=\"text-muted\" style={{marginRight: '1em'}}>\n                                  {balance[asset][asset]}\n                                </span>\n                                {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(balance[asset][currency] || 0)}\n                              </td>\n                            ))\n                          }\n                          <td className=\"text-right\">\n                            {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(assetTracker.assets.reduce((acc, asset) => acc + (balance[asset][currency] || 0), 0))}\n                          </td>\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              )\n            : null\n        }\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}