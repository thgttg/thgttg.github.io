{"version":3,"sources":["AssetTracker.js","App.js","reportWebVitals.js","index.js"],"names":["appClient","Stitch","initializeDefaultAppClient","svcClient","getServiceClient","RemoteMongoClient","factory","dateSorter","a","b","moment","date","coinUnitMap","algo","monetary","unit","fractional","decimalPlaces","band","bch","btc","celo","comp","dash","dot","eth","grt","ksm","ltc","mkr","nu","xlm","xrp","zec","AssetTracker","transactions","quotes","assets","Set","map","tx","asset","sort","currencies","quote","fiat","this","earliestDate","utcOffset","startOf","toISOString","slice","latestDate","endOf","console","log","balanceAtDate","filter","reduce","accumulator","plus","BigNumber","amount","balances","Array","from","length","diff","v","i","add","Object","fromEntries","balance","coin","times","open","close","dividedBy","toNumber","total","currency","acc","latestBalance","pop","name","value","gistId","Promise","resolve","reject","fetch","then","response","json","gist","keys","files","_filename","endsWith","JSON","parse","content","_transactions","_transaction","includes","auth","loginWithCredential","AnonymousCredential","db","collection","find","$and","$in","$gte","$lte","asArray","catch","error","cookies","Cookies","colors","default","CustomToolTip","props","active","payload","label","style","backgroundColor","padding","border","width","colSpan","format","toLowerCase","x","item","color","className","Intl","NumberFormat","toUpperCase","CustomPieLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","fill","index","RADIAN","Math","PI","radiusForCoinValueLabel","xForCoinValueLabel","cos","yForCoinValueLabel","sin","radiusForFiatValueLabel","xForFiatValueLabel","yForFiatValueLabel","radiusForPercentLabel","xForPercentLabel","yForPercentLabel","y","textAnchor","dominantBaseline","toFixed","getHistoricalValue","App","useState","to","dateRange","setDateRange","get","setCurrency","window","location","href","match","split","setGistId","undefined","assetTracker","setAssetTracker","useEffect","set","path","fromGist","Container","fluid","Navbar","bg","variant","Brand","Nav","Form","inline","Control","type","size","disabled","onChange","event","target","_dateRange","defaultValue","placeholder","as","Row","Col","sm","ResponsiveContainer","minHeight","PieChart","Pie","data","dataKey","Cell","Spinner","animation","LineChart","isBetween","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","tick","fontSize","tickFormatter","YAxis","yAxisId","orientation","Tooltip","Legend","Line","stroke","Table","striped","bordered","hover","transaction","key","note","marginRight","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.019e17dd.chunk.js","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport moment from 'moment';\nimport {\n  Stitch,\n  AnonymousCredential,\n  RemoteMongoClient\n} from 'mongodb-stitch-browser-sdk';\n\nconst appClient = Stitch.initializeDefaultAppClient('grenade-tnats');\nconst svcClient = appClient.getServiceClient(RemoteMongoClient.factory, 'mongodb-atlas-grenade-stitch');\n\nconst dateSorter = (a, b) => (\n    (moment(a.date) < moment(b.date))\n        ? -1\n        : (moment(a.date) > moment(b.date))\n            ? 1\n            : 0\n);\n\nconst coinUnitMap = {\n    algo: {\n        monetary: {\n            unit: 'algo',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    band: {\n        monetary: {\n            unit: 'band',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    bch: {\n        monetary: {\n            unit: 'bch',\n        },\n        fractional: {\n            unit: 'satoshi',\n            decimalPlaces: 8,\n        },\n    },\n    btc: {\n        monetary: {\n            unit: 'btc',\n        },\n        fractional: {\n            unit: 'satoshi',\n            decimalPlaces: 8,\n        },\n    },\n    celo: {\n        monetary: {\n            unit: 'celo',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    comp: {\n        monetary: {\n            unit: 'comp',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    dash: {\n        monetary: {\n            unit: 'dash',\n        },\n        fractional: {\n            unit: 'duff',\n            decimalPlaces: 8,\n        },\n    },\n    dot: {\n        monetary: {\n            unit: 'dot',\n        },\n        fractional: {\n            unit: 'planck',\n            decimalPlaces: 10,\n        },\n    },\n    eth: {\n        monetary: {\n            unit: 'eth',\n        },\n        fractional: {\n            unit: 'wei',\n            decimalPlaces: 18,\n        },\n    },\n    grt: {\n        monetary: {\n            unit: 'grt',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    ksm: {\n        monetary: {\n            unit: 'ksm',\n        },\n        fractional: {\n            unit: 'planck',\n            decimalPlaces: 12,\n        },\n    },\n    ltc: {\n        monetary: {\n            unit: 'ltc',\n        },\n        fractional: {\n            unit: 'litoshi',\n            decimalPlaces: 8,\n        },\n    },\n    mkr: {\n        monetary: {\n            unit: 'mkr',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    nu: {\n        monetary: {\n            unit: 'nu',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    xlm: {\n        monetary: {\n            unit: 'xlm',\n        },\n        fractional: {\n            unit: 'stroop',\n            decimalPlaces: 7,\n        },\n    },\n    xrp: {\n        monetary: {\n            unit: 'xrp',\n        },\n        fractional: {\n            unit: 'drop',\n            decimalPlaces: 6,\n        },\n    },\n    zec: {\n        monetary: {\n            unit: 'zec',\n        },\n        fractional: {\n            unit: 'zatoshi',\n            decimalPlaces: 8,\n        },\n    },\n};\n\nexport default class AssetTracker {\n    constructor(transactions, quotes) {\n        const assets = [...new Set(transactions.map(tx => tx.asset))].sort();\n        const currencies = [...new Set(quotes.map(quote => quote.fiat))].sort();\n        this.assets = assets;\n        this.quotes = quotes;\n        this.currencies = currencies;\n        this.transactions = transactions.sort(dateSorter);\n        this.earliestDate = moment(this.transactions[0].date).utcOffset(0).startOf('day').toISOString().slice(0, 10);\n        this.latestDate = moment().utcOffset(0).endOf('day').toISOString();\n        console.log(`earliest: ${this.earliestDate}, latest: ${this.latestDate}`);\n        this.balanceAtDate = (asset, date) => this.transactions\n            .filter(tx => ((tx.asset === asset) && (moment(tx.date).utcOffset(0) <= date)))\n            .reduce((accumulator, tx) => accumulator.plus(new BigNumber(tx.amount)), new BigNumber(0));\n        this.balances = Array.from(\n            {\n                length: ((moment(this.latestDate).startOf('day').diff(moment(this.earliestDate).startOf('day'), 'days')) + 1)\n            },\n            (v, i) => moment(this.earliestDate).startOf('day').add(i, 'days').toISOString().slice(0, 10)\n        ).map(date => ({\n            // todo: filter out assets where balance is always zero\n            ...Object.fromEntries(this.assets.map(asset => {\n                const balance = this.balanceAtDate(asset, moment(date).utcOffset(0).endOf('day'));\n                return [\n                    asset,\n                    {\n                        ...Object.fromEntries(quotes.filter(quote => ((quote.coin === asset) && (quote.date === date))).map(quote => [\n                            quote.fiat,\n                            balance.times(BigNumber(quote.open.amount).plus(BigNumber(quote.close.amount)).dividedBy(BigNumber(2))).decimalPlaces(2).toNumber() || BigNumber(0).toNumber()\n                        ])),\n                        [asset]: balance.toNumber(),\n                    }\n                ];\n            })),\n            date,\n        })).map(balance => ({\n            ...balance,\n            total: Object.fromEntries(currencies.map(currency => [\n                currency,\n                assets.reduce((acc, asset) => acc + (balance[asset][currency] || 0), 0)\n            ]))\n        }));\n        const latestBalance = [...this.balances].pop();\n        //console.log(latestBalance);\n        this.latestBalance = this.assets\n          .filter(a => !!latestBalance[a][this.currencies[0]])\n          .map(a => ({\n            name: a,\n            value: {\n                [a]: latestBalance[a][a],\n                [this.currencies[0]]: latestBalance[a][this.currencies[0]],\n            }\n          }));\n        \n    }\n\n    static fromGist(gistId) {\n        return new Promise((resolve , reject) => {\n            fetch(`https://api.github.com/gists/${gistId}`)\n                .then((response) => response.json())\n                .then((gist) => {\n                    const transactions = Object.keys(gist.files)\n                        .filter(_filename => _filename.endsWith('.json'))\n                        .map(_filename => JSON.parse(gist.files[_filename].content))\n                        .reduce((accumulator, _transactions) => [...accumulator, ..._transactions])\n                        .filter(_transaction => Object.keys(coinUnitMap).includes(_transaction.asset))\n                        .sort(dateSorter);\n                    const assets = [...new Set(transactions.map(tx => tx.asset))];\n                    const earliestDate = moment(transactions[0].date).utcOffset(0).startOf('day').toISOString().slice(0, 10);\n                    const latestDate = moment().utcOffset(0).endOf('day').toISOString().slice(0, 10);\n                    appClient.auth\n                        .loginWithCredential(new AnonymousCredential())\n                        .then(() => {\n                            svcClient.db('grenade')\n                                .collection('quote')\n                                .find(\n                                    {\n                                        $and: [\n                                            {\n                                                coin: {\n                                                    $in: assets\n                                                }\n                                            },\n                                            {\n                                                date: {\n                                                    $gte: earliestDate\n                                                }\n                                            },\n                                            {\n                                                date: {\n                                                    $lte: latestDate\n                                                }\n                                            }\n                                        ]\n                                    }\n                                )\n                                .asArray()\n                                .then(quotes => {\n                                    resolve(new AssetTracker(transactions, quotes));\n                                });\n                        });\n                })\n                .catch((error) => {\n                    reject(error);\n                });          \n        });\n    }\n};","import React, { useState, useEffect } from 'react';\nimport BigNumber from \"bignumber.js\";\nimport Cookies from 'universal-cookie';\nimport moment from 'moment';\n\n// bootstrap\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\n\n// recharts\nimport { PieChart, Pie, Cell, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport AssetTracker from './AssetTracker';\n\nconst cookies = new Cookies();\nconst colors = {\n  bch: '#8dc351',\n  btc: '#f7931a',\n  dash: '#008ce7',\n  dot: '#e71081',\n  eth: '#444eec',\n  ksm: '#8015ab',\n  ltc: '#345d9d',\n  xlm: '#14b6e7',\n  xrp: '#23292f',\n  zec: '#ecb244',\n  total: '#999999',\n  default: '#cccccc',\n};\n\nconst CustomToolTip = props => {\n  const { active, payload, label, currency } = props;\n  if (!active || !payload) {\n    return null;\n  }\n  return (\n    <div style={{\n      backgroundColor: '#ffffff',\n      padding: '1em',\n      border: '1px solid #cccccc',\n    }}>\n      <table style={{width: '100%'}}>\n        <thead>\n          <tr>\n            <th colSpan=\"2\">\n              {moment(label).format(\"MMMM Do, YYYY\").toLowerCase()}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            payload.filter(x => x.name !== 'total' && x.value > 0).map((item) => (\n              <tr key={item.name} style={{ color: (colors[item.name] || colors['default']) }}>\n                <td>\n                  {item.name}\n                </td>\n                <td className=\"text-right\">\n                  {Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(item.value)}\n                </td>\n              </tr>\n            ))\n          }\n        </tbody>\n        <tfoot>\n          <tr style={{ color: colors.total }}>\n            <th>\n              total\n            </th>\n            <th className=\"text-right\">\n              {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(payload.find((item) => item.name === 'total').value)}\n            </th>\n          </tr>\n        </tfoot>\n      </table>\n    </div>\n  );\n};\n\nconst CustomPieLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index, fill, asset, currency }) => {\n  const RADIAN = Math.PI / 180;\n\n  const radiusForCoinValueLabel = innerRadius + (outerRadius - innerRadius) * 1.5;\n  const xForCoinValueLabel = cx + radiusForCoinValueLabel * Math.cos(-midAngle * RADIAN);\n  const yForCoinValueLabel = cy + radiusForCoinValueLabel * Math.sin(-midAngle * RADIAN);\n\n  const radiusForFiatValueLabel = innerRadius + (outerRadius - innerRadius) * 1.2;\n  const xForFiatValueLabel = cx + radiusForFiatValueLabel * Math.cos(-midAngle * RADIAN);\n  const yForFiatValueLabel = cy + radiusForFiatValueLabel * Math.sin(-midAngle * RADIAN);\n\n  const radiusForPercentLabel = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const xForPercentLabel = cx + radiusForPercentLabel * Math.cos(-midAngle * RADIAN);\n  const yForPercentLabel = cy + radiusForPercentLabel * Math.sin(-midAngle * RADIAN);\n  return (\n    <>\n      <text x={xForCoinValueLabel} y={yForCoinValueLabel} fill={fill} textAnchor={xForCoinValueLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        {asset.name} {asset.value[asset.name]}\n      </text>\n      <text x={xForFiatValueLabel} y={yForFiatValueLabel} fill={fill} textAnchor={xForFiatValueLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        ({new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(asset.value[currency])})\n      </text>\n      <text x={xForPercentLabel} y={yForPercentLabel} fill=\"white\" textAnchor={xForPercentLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    </>\n  );\n};\n\nfunction getHistoricalValue(amount, asset, currency, date, quotes) {\n  const quote = quotes.find(quote => ((quote.fiat === currency) && (quote.coin === asset) && (quote.date === date.slice(0, 10))));\n  if (!quote) {\n    console.error(`failed to find quote using args: amount: ${amount}, asset: ${asset}, currency: ${currency}, date: ${date}, quotes.length,: ${quotes.length}`);\n    return 0;\n  }\n  return BigNumber(amount).times(BigNumber(quote.open.amount).plus(BigNumber(quote.close.amount)).dividedBy(BigNumber(2))).decimalPlaces(2).toNumber();\n}\n\nfunction App() {\n  const [dateRange, setDateRange] = useState({ from: moment('2020-11-11').utcOffset(0).startOf('day'), to: moment().utcOffset(0).endOf('day') });\n  const [currency, setCurrency] = useState(cookies.get('currency') || 'eur');\n  const [gistId, setGistId] = useState(window.location.href.match(/#[a-f0-9]{32}$/) ? window.location.href.split('#').pop() : cookies.get('gist') || '8272a8540d65584f16a2d3f6b9c34e4c');\n  const [assetTracker, setAssetTracker] = useState(undefined);\n  useEffect(() => {\n    if(!!currency && currency.match(/^[a-z]{3}$/) && cookies.get('currency') !== currency) {\n      cookies.set('currency', currency, { path: '/' });\n    }\n  }, [currency]);\n  useEffect(() => {\n    if(!!gistId && gistId.match(/^[a-f0-9]{32}$/) && cookies.get('gist') !== gistId) {\n      cookies.set('gist', gistId, { path: '/' });\n    }\n  }, [gistId]);\n  useEffect(() => {\n    if (!!gistId && gistId.match(/^[a-f0-9]{32}$/)) {\n      AssetTracker\n        .fromGist(gistId)\n        .then(setAssetTracker)\n        .catch(console.error);\n    }\n  }, [gistId]);\n  return (\n    <Container fluid>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#\">don&rsquo;t panic</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n        </Nav>\n        <Form inline>\n          <Form.Control\n            type=\"text\"\n            style={{width: '7em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            value={dateRange.from /* todo: figure out why moment removes a day... */}\n            onChange={\n              (event) => {\n                const from = event.target.value;\n                if (from.match(/^20[12][0-9]-[01][0-9]-[0123][0-9]$/)) {\n                  setDateRange(_dateRange => ({\n                    ..._dateRange,\n                    from\n                  }));\n                }\n              }\n            } />\n          <Form.Control\n            type=\"text\"\n            style={{width: '7em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={moment(dateRange.to).toISOString().slice(0, 10)}\n            onChange={\n              (event) => {\n                const to = event.target.value;\n                if (to.match(/^20[12][0-9]-[01][0-9]-[0123][0-9]$/)) {\n                  setDateRange(_dateRange => ({\n                    ..._dateRange,\n                    to\n                  }));\n                }\n              }\n            } />\n          <Form.Control\n            type=\"text\"\n            placeholder=\"gist id\"\n            style={{width: '19em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={gistId}\n            onChange={\n              (event) => {\n                const gistId = event.target.value;\n                if (gistId.match(/^[a-f0-9]{32}$/)) {\n                  setGistId(gistId);\n                }\n              }\n            } />\n          <Form.Control\n            as=\"select\"\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={currency}\n            onChange={\n              (event) => {\n                const currency = event.target.value;\n                if (currency.match(/^[a-f]{3}$/)) {\n                  setCurrency(currency);\n                }\n              }\n            }>\n            <option>eur</option>\n            <option>usd</option>\n          </Form.Control>\n        </Form>\n      </Navbar>\n      <Row>\n        <Col sm={4}>\n          {\n            (!!assetTracker && !!assetTracker.latestBalance.length)\n              ? (\n                  <ResponsiveContainer width=\"100%\" minHeight=\"500px\">\n                    <PieChart>\n                      <Pie\n                        data={assetTracker.latestBalance}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        label={CustomPieLabel}\n                        outerRadius={80}\n                        dataKey={`value.${currency}`}>\n                        {\n                          assetTracker.latestBalance.map((item) => (\n                            <Cell key={item.name} fill={colors[item.name]} asset={{ name: item.name, value: { [currency]: item.value[currency], [item.name]: item.value[item.name] } }} currency={currency} />\n                          ))\n                        }\n                      </Pie>\n                    </PieChart>\n                  </ResponsiveContainer>\n                )\n              : (\n                  <Spinner animation=\"grow\" />\n                )\n          }\n        </Col>\n        <Col sm={8}>\n          {\n            (!!assetTracker && !!assetTracker.balances.length)\n              ? (\n                  <ResponsiveContainer width=\"100%\" minHeight=\"500px\">\n                    <LineChart\n                      data={assetTracker.balances.filter(balance => moment(balance.date).isBetween(dateRange.from, dateRange.to))}\n                      margin={{ top: 50, right: 10, left: 10, bottom: 10 }} >\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis\n                        dataKey=\"date\"\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={tick => moment(tick).format('MMM D').toLowerCase()} />\n                      <YAxis\n                        yAxisId=\"left\"\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={tick => new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(tick)} />\n                      <YAxis\n                        yAxisId=\"right\"\n                        orientation=\"right\"\n                        strokeDasharray=\"5 5\"\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={tick => new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(tick)} />\n                      <Tooltip content={<CustomToolTip />} currency={currency} />\n                      <Legend />\n                      {\n                        assetTracker.assets.map(asset => (\n                          <Line  yAxisId=\"left\" type=\"monotone\" name={`${asset}`} dataKey={`${asset}.${currency}`} dot={false} stroke={colors[asset] || colors['default']} key={asset} />\n                        ))\n                      }\n                      <Line yAxisId=\"right\" type=\"monotone\" name={`total`} dataKey={`total.${currency}`} strokeDasharray=\"5 5\" dot={false} stroke={colors['total']} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                )\n              : (\n                  <Spinner animation=\"grow\" />\n                )\n          }\n        </Col>\n      </Row>\n      <Row>\n        <Table striped bordered hover size=\"sm\" style={{margin: '50px 10px 10px 10px'}}>\n          <thead>\n            <tr>\n              <th colSpan=\"4\" className=\"text-right\">\n                transaction history\n              </th>\n            </tr>\n            <tr>\n              <th>\n                date\n              </th>\n              <th>\n                note\n              </th>\n              <th className=\"text-right\">\n                asset amount\n              </th>\n              <th className=\"text-right\">\n                {currency} amount\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              (!!assetTracker && !!assetTracker.transactions.length)\n                ? assetTracker.transactions.filter(transaction => moment(transaction.date).isBetween(dateRange.from, dateRange.to)).map((tx, key) => (\n                    <tr key={key}>\n                      <td>\n                        {tx.date}\n                      </td>\n                      <td>\n                        {tx.note}\n                      </td>\n                      <td className=\"text-right\">\n                        {tx.asset} {tx.amount}\n                      </td>\n                      <td className=\"text-right\">\n                        {\n                          new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(\n                            getHistoricalValue(tx.amount, tx.asset, currency, tx.date, assetTracker.quotes)\n                          )\n                        }\n                      </td>\n                    </tr>\n                  ))\n                : null\n            }\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        {\n          (!!assetTracker && !!assetTracker.balances.length)\n            ? (\n                <Table striped bordered hover size=\"sm\" style={{margin: '50px 10px 10px 10px'}}>\n                  <thead>\n                    <tr>\n                      <th colSpan={(assetTracker.assets.length + 2)} className=\"text-right\">\n                        balance history\n                      </th>\n                    </tr>\n                    <tr>\n                      <th>date</th>\n                      {\n                        assetTracker.assets.map(asset => (\n                          <th key={asset} className=\"text-right\">\n                            {asset}\n                          </th>\n                        ))\n                      }\n                      <th className=\"text-right\">total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      assetTracker.balances.filter(balance => moment(balance.date).isBetween(dateRange.from, dateRange.to)).map((balance) => (\n                        <tr key={balance.date}>\n                          <th>{balance.date}</th>\n                          {\n                            assetTracker.assets.map(asset => (\n                              <td key={`${balance.date}-${asset}`} className=\"text-right\">\n                                <span className=\"text-muted\" style={{marginRight: '1em'}}>\n                                  {balance[asset][asset]}\n                                </span>\n                                {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(balance[asset][currency] || 0)}\n                              </td>\n                            ))\n                          }\n                          <td className=\"text-right\">\n                            {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(balance.total[currency] || 0)}\n                          </td>\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              )\n            : null\n        }\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}