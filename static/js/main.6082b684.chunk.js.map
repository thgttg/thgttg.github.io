{"version":3,"sources":["AssetTracker.js","App.js","reportWebVitals.js","index.js"],"names":["appClient","Stitch","initializeDefaultAppClient","svcClient","getServiceClient","RemoteMongoClient","factory","dateSorter","a","b","moment","date","coinUnitMap","algo","monetary","unit","fractional","decimalPlaces","band","bch","btc","celo","comp","dash","dot","eth","grt","ksm","ltc","mkr","nu","uma","xlm","xrp","zec","AssetTracker","transactions","quotes","assets","Set","map","tx","asset","sort","currencies","quote","fiat","this","quoteYesterday","find","candidate","coin","utc","startOf","subtract","toISOString","slice","change","BigNumber","close","amount","minus","dividedBy","times","todaysQuotes","Object","fromEntries","currency","earliestDate","latestDate","endOf","console","log","quoteAtDate","balanceAtDate","filter","reduce","accumulator","plus","balances","Array","from","length","diff","v","i","add","balance","toNumber","total","acc","latestBalance","pop","penultimateBalance","value","day","gistId","Promise","resolve","reject","fetch","then","response","json","gist","keys","files","x","endsWith","JSON","parse","content","vault","includes","auth","loginWithCredential","AnonymousCredential","db","collection","$and","$in","$gte","$lte","asArray","catch","error","library","fas","faCaretDown","faCaretUp","faCircle","cookies","Cookies","colors","default","CustomToolTip","props","active","payload","label","style","backgroundColor","padding","border","width","colSpan","format","toLowerCase","name","item","color","className","Intl","NumberFormat","toUpperCase","borderBottom","borderTop","CustomPieLabel","cx","cy","midAngle","innerRadius","outerRadius","percent","fill","index","RADIAN","Math","PI","radiusForCoinValueLabel","xForCoinValueLabel","cos","yForCoinValueLabel","sin","radiusForFiatValueLabel","xForFiatValueLabel","yForFiatValueLabel","radiusForPercentLabel","xForPercentLabel","yForPercentLabel","y","textAnchor","dominantBaseline","toFixed","getHistoricalValue","open","App","useState","undefined","footer","setFooter","to","dateRange","setDateRange","get","setCurrency","window","location","href","match","split","setGistId","assetTracker","setAssetTracker","useEffect","body","text","set","path","fromGist","Container","fluid","Navbar","bg","variant","Brand","Nav","Form","inline","Control","type","size","disabled","onChange","event","target","_dateRange","defaultValue","placeholder","as","Row","Table","hover","margin","marginLeft","icon","Fragment","Image","src","alt","height","roundedCircle","time","HTML5_FMT","TIME_SECONDS","Spinner","animation","Col","sm","ResponsiveContainer","minHeight","PieChart","Pie","data","dataKey","Cell","LineChart","isBetween","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","tick","fontSize","tickFormatter","YAxis","yAxisId","orientation","Tooltip","Legend","Line","stroke","striped","bordered","transaction","key","note","marginRight","source","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"seAQMA,EAAYC,IAAOC,2BAA2B,iBAC9CC,EAAYH,EAAUI,iBAAiBC,IAAkBC,QAAS,gCAElEC,EAAa,SAACC,EAAGC,GAAJ,OACdC,IAAOF,EAAEG,MAAQD,IAAOD,EAAEE,OACpB,EACAD,IAAOF,EAAEG,MAAQD,IAAOD,EAAEE,MACvB,EACA,GAGRC,EAAc,CAChBC,KAAM,CACFC,SAAU,CACNC,KAAM,QAEVC,WAAY,CACRD,KAAM,UACNE,eAAgB,IAGxBC,KAAM,CACFJ,SAAU,CACNC,KAAM,QAEVC,WAAY,CACRD,KAAM,UACNE,eAAgB,IAGxBE,IAAK,CACDL,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,UACNE,cAAe,IAGvBG,IAAK,CACDN,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,UACNE,cAAe,IAGvBI,KAAM,CACFP,SAAU,CACNC,KAAM,QAEVC,WAAY,CACRD,KAAM,UACNE,eAAgB,IAGxBK,KAAM,CACFR,SAAU,CACNC,KAAM,QAEVC,WAAY,CACRD,KAAM,UACNE,eAAgB,IAGxBM,KAAM,CACFT,SAAU,CACNC,KAAM,QAEVC,WAAY,CACRD,KAAM,OACNE,cAAe,IAGvBO,IAAK,CACDV,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,SACNE,cAAe,KAGvBQ,IAAK,CACDX,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,MACNE,cAAe,KAGvBS,IAAK,CACDZ,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,UACNE,eAAgB,IAGxBU,IAAK,CACDb,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,SACNE,cAAe,KAGvBW,IAAK,CACDd,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,UACNE,cAAe,IAGvBY,IAAK,CACDf,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,UACNE,eAAgB,IAGxBa,GAAI,CACAhB,SAAU,CACNC,KAAM,MAEVC,WAAY,CACRD,KAAM,UACNE,eAAgB,IAGxBc,IAAK,CACDjB,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,UACNE,cAAe,KAGvBe,IAAK,CACDlB,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,SACNE,cAAe,IAGvBgB,IAAK,CACDnB,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,OACNE,cAAe,IAGvBiB,IAAK,CACDpB,SAAU,CACNC,KAAM,OAEVC,WAAY,CACRD,KAAM,UACNE,cAAe,KAKNkB,E,WACjB,WAAYC,EAAcC,GAAS,IAAD,2BAC9B,IAAMC,EAAS,YAAI,IAAIC,IAAIH,EAAaI,KAAI,SAAAC,GAAE,OAAIA,EAAGC,WAASC,OACxDC,EAAa,YAAI,IAAIL,IAAIF,EAAOG,KAAI,SAAAK,GAAK,OAAIA,EAAMC,UAAQH,OACjEI,KAAKT,OAASA,EACdS,KAAKV,OAASA,EAAOG,KAAI,SAACK,GACtB,IAAMG,EAAiBX,EAAOY,MAAK,SAAAC,GAAS,OAAMA,EAAUC,OAASN,EAAMM,MAAUD,EAAUJ,OAASD,EAAMC,MAAUI,EAAUvC,OAASD,IAAO0C,IAAIP,EAAMlC,MAAM0C,QAAQ,OAAOC,SAAS,EAAG,OAAOC,cAAcC,MAAM,EAAG,OAC3N,OAAO,2BACAX,GADP,IAEIY,OAAWT,EAAoBU,IAAUb,EAAMc,MAAMC,QAAQC,MAAMH,IAAUV,EAAeW,MAAMC,SAAUE,UAAUJ,IAAUV,EAAeW,MAAMC,SAASG,MAAM,KAAQ,OAGpLhB,KAAKiB,aAAeC,OAAOC,YAAY5B,EAAOE,KAAI,SAAAE,GAAK,MAAI,CACvDA,EACAuB,OAAOC,YAAYtB,EAAWJ,KAAI,SAAA2B,GAAQ,MAAI,CAC1CA,EACA,EAAK9B,OAAOY,MAAK,SAAAJ,GAAK,OAAMA,EAAMM,OAAST,GAAWG,EAAMC,OAASqB,GAActB,EAAMlC,OAASD,IAAO0C,MAAMC,QAAQ,OAAOE,cAAcC,MAAM,EAAG,iBAG7JT,KAAKH,WAAaA,EAClBG,KAAKX,aAAeA,EAAaO,KAAKpC,GACtCwC,KAAKqB,aAAe1D,IAAO0C,IAAIL,KAAKX,aAAa,GAAGzB,MAAM0C,QAAQ,OAAOE,cAAcC,MAAM,EAAG,IAChGT,KAAKsB,WAAa3D,IAAO0C,MAAMkB,MAAM,OAAOf,cAC5CgB,QAAQC,IAAR,oBAAyBzB,KAAKqB,aAA9B,qBAAuDrB,KAAKsB,aAC5DtB,KAAK0B,YAAc,SAAC/B,EAAOyB,EAAUxD,GAAlB,OAA2B,EAAK0B,OAC9CY,MAAK,SAAAJ,GAAK,OAAMA,EAAMM,OAAST,GAAWG,EAAMC,OAASqB,GAActB,EAAMlC,OAASA,MAC3FoC,KAAK2B,cAAgB,SAAChC,EAAO/B,GAAR,OAAiB,EAAKyB,aACtCuC,QAAO,SAAAlC,GAAE,OAAMA,EAAGC,QAAUA,GAAWhC,IAAO0C,IAAIX,EAAG9B,OAASA,KAC9DiE,QAAO,SAACC,EAAapC,GAAd,OAAqBoC,EAAYC,KAAK,IAAIpB,IAAUjB,EAAGmB,WAAU,IAAIF,IAAU,KAC3FX,KAAKgC,SAAWC,MAAMC,KAClB,CACIC,OAAUxE,IAAOqC,KAAKsB,YAAYhB,QAAQ,OAAO8B,KAAKzE,IAAOqC,KAAKqB,cAAcf,QAAQ,OAAQ,QAAW,IAE/G,SAAC+B,EAAGC,GAAJ,OAAU3E,IAAO,EAAK0D,cAAcf,QAAQ,OAAOiC,IAAID,EAAG,QAAQ9B,cAAcC,MAAM,EAAG,OAC3FhB,KAAI,SAAA7B,GAAI,kCAEHsD,OAAOC,YAAY,EAAK5B,OAAOE,KAAI,SAAAE,GAClC,IAAM6C,EAAU,EAAKb,cAAchC,EAAOhC,IAAO0C,IAAIzC,GAAM2D,MAAM,QACjE,MAAO,CACH5B,EADG,2BAGIuB,OAAOC,YAAY7B,EAAOsC,QAAO,SAAA9B,GAAK,OAAMA,EAAMM,OAAST,GAAWG,EAAMlC,OAASA,KAAQ6B,KAAI,SAAAK,GAAK,MAAI,CACzGA,EAAMC,KACNyC,EAAQxB,MAAML,IAAUb,EAAMc,MAAMC,SAAS3C,cAAc,GAAGuE,YAAc9B,IAAU,GAAG8B,iBAL9F,kBAOE9C,EAAQ6C,EAAQC,mBAXvB,IAeN7E,YACA6B,KAAI,SAAA+C,GAAO,kCACRA,GADQ,IAEXE,MAAOxB,OAAOC,YAAYtB,EAAWJ,KAAI,SAAA2B,GAAQ,MAAI,CACjDA,EACA7B,EAAOsC,QAAO,SAACc,EAAKhD,GAAN,OAAgBgD,GAAOH,EAAQ7C,GAAOyB,IAAa,KAAI,aAG7E,IAAMwB,EAAgB,YAAI5C,KAAKgC,UAAUa,MACnCC,EAAqB,YAAI9C,KAAKgC,UAAUvB,OAAO,GAAI,GAAG,GAC5DT,KAAK4C,cAAgB1B,OAAOC,YAAY,sBAAI5B,GAAW,CAAC,UAAUqC,QAAO,SAAAjC,GAAK,MAAgB,UAAVA,KAAyBiD,EAAcjD,GAAOA,MAAUF,KAAI,SAAAE,GAAK,MAAI,CACrJA,EACAuB,OAAOC,YAAYtB,EAAWJ,KAAI,SAAA2B,GAAQ,MAAI,CAC1CA,EACA,CACIP,OAAmB,UAAVlB,EAAqBiD,EAAcjD,GAAOA,GAAS,EAC5DoD,MAAOH,EAAcjD,GAAOyB,GAC5BV,OAAQ,CACJsC,KAAOJ,EAAcjD,GAAOyB,IAAa0B,EAAmBnD,GAAOyB,IAAa,KAAO0B,EAAmBnD,GAAOyB,IAAa,GAAK,gB,iDAOvJ,SAAgB6B,GACZ,OAAO,IAAIC,SAAQ,SAACC,EAAUC,GAC1BC,MAAM,gCAAD,OAAiCJ,IACjCK,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACH,IAAMpE,EAAe6B,OAAOwC,KAAKD,EAAKE,OACjC/B,QAAO,SAAAgC,GAAC,OAAIA,EAAEC,SAAS,YACvBpE,KAAI,SAAAmE,GAAC,OAAIE,KAAKC,MAAMN,EAAKE,MAAMC,GAAGI,SAASvE,KAAI,SAAAC,GAAE,kCAAUA,GAAV,IAAcuE,MAAOL,EAAEnD,MAAM,GAAI,WAClFoB,QAAO,SAACc,EAAKjD,GAAN,4BAAiBiD,GAAjB,YAAyBjD,OAChCkC,QAAO,SAAAlC,GAAE,OAAIwB,OAAOwC,KAAK7F,GAAaqG,SAASxE,EAAGC,UAClDC,KAAKpC,GACJ+B,EAAM,YAAO,IAAIC,IAAIH,EAAaI,KAAI,SAAAC,GAAE,OAAIA,EAAGC,WAC/C0B,EAAe1D,IAAO0C,IAAIhB,EAAa,GAAGzB,MAAM0C,QAAQ,OAAOE,cAAcC,MAAM,EAAG,IACtFa,EAAa3D,IAAO0C,MAAMkB,MAAM,OAAOf,cAAcC,MAAM,EAAG,IACpExD,EAAUkH,KACLC,oBAAoB,IAAIC,KACxBf,MAAK,WACFlG,EAAUkH,GAAG,WACRC,WAAW,SACXrE,KACG,CACIsE,KAAM,CACF,CACIpE,KAAM,CACFqE,IAAKlF,IAGb,CACI3B,KAAM,CACF8G,KAAMrD,IAGd,CACIzD,KAAM,CACF+G,KAAMrD,OAMzBsD,UACAtB,MAAK,SAAAhE,GACF6D,EAAQ,IAAI/D,EAAaC,EAAcC,aAI1DuF,OAAM,SAACC,GACJ1B,EAAO0B,a,qCCrR3BC,IAAQxC,IAAIyC,IAAKC,KACjBF,IAAQxC,IAAIyC,IAAKE,KACjBH,IAAQxC,IAAIyC,IAAKG,KAEjB,IAAMC,EAAU,IAAIC,IACdC,EAAS,CACblH,IAAK,UACLC,IAAK,UACLG,KAAM,UACNC,IAAK,UACLC,IAAK,UACLE,IAAK,UACLC,IAAK,UACLG,IAAK,UACLC,IAAK,UACLC,IAAK,UACLC,IAAK,UACLuD,MAAO,UACP6C,QAAS,WAGLC,EAAgB,SAAAC,GAAU,IACtBC,EAAqCD,EAArCC,OAAQC,EAA6BF,EAA7BE,QAASC,EAAoBH,EAApBG,MAAOxE,EAAaqE,EAAbrE,SAChC,OAAKsE,GAAWC,EAId,qBAAKE,MAAO,CACVC,gBAAiB,UACjBC,QAAS,MACTC,OAAQ,qBAHV,SAKE,wBAAOH,MAAO,CAACI,MAAO,QAAtB,UACE,gCACE,6BACE,oBAAIC,QAAQ,IAAZ,SACGvI,IAAOiI,GAAOO,OAAO,iBAAiBC,oBAI7C,gCAEIT,EAAQ/D,QAAO,SAAAgC,GAAC,MAAe,UAAXA,EAAEyC,MAAoBzC,EAAEb,MAAQ,KAAGtD,KAAI,SAAC6G,GAAD,OACzD,qBAAoBT,MAAO,CAAEU,MAAQjB,EAAOgB,EAAKD,OAASf,EAAM,SAAhE,UACE,6BACGgB,EAAKD,OAER,oBAAIG,UAAU,aAAd,SACGC,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OAAOG,EAAKvD,WAL5FuD,EAAKD,WAWpB,gCACE,qBAAIR,MAAO,CAAEU,MAAOjB,EAAO5C,MAAOkE,aAAa,cAAD,OAAgBtB,EAAO5C,OAASmE,UAAU,cAAD,OAAgBvB,EAAO5C,QAA9G,UACE,uCAGA,oBAAI8D,UAAU,aAAd,SACG,IAAIC,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OAAOR,EAAQzF,MAAK,SAACoG,GAAD,MAAwB,UAAdA,EAAKD,QAAkBtD,mBApCjJ,MA6CL+D,EAAiB,SAAC,GAAoG,IAAlGC,EAAiG,EAAjGA,GAAIC,EAA6F,EAA7FA,GAAIC,EAAyF,EAAzFA,SAAUC,EAA+E,EAA/EA,YAAaC,EAAkE,EAAlEA,YAAaC,EAAqD,EAArDA,QAAgBC,GAAqC,EAA5CC,MAA4C,EAArCD,MAAM1H,EAA+B,EAA/BA,MAAOyB,EAAwB,EAAxBA,SAAUoB,EAAc,EAAdA,QACrG+E,EAASC,KAAKC,GAAK,IAEnBC,EAA0BR,EAA4C,GAA7BC,EAAcD,GACvDS,EAAqBZ,EAAKW,EAA0BF,KAAKI,KAAKX,EAAWM,GACzEM,EAAqBb,EAAKU,EAA0BF,KAAKM,KAAKb,EAAWM,GAEzEQ,EAA0Bb,EAA4C,KAA7BC,EAAcD,GACvDc,EAAqBjB,EAAKgB,EAA0BP,KAAKI,KAAKX,EAAWM,GACzEU,EAAqBjB,EAAKe,EAA0BP,KAAKM,KAAKb,EAAWM,GAEzEW,EAAwBhB,EAA4C,IAA7BC,EAAcD,GACrDiB,EAAmBpB,EAAKmB,EAAwBV,KAAKI,KAAKX,EAAWM,GACrEa,EAAmBpB,EAAKkB,EAAwBV,KAAKM,KAAKb,EAAWM,GAC3E,OACE,qCACE,uBAAM3D,EAAG+D,EAAoBU,EAAGR,EAAoBR,KAAMA,EAAMiB,WAAYX,EAAqBZ,EAAK,QAAU,MAAOwB,iBAAiB,UAAxI,UACG5I,EADH,IACW6C,EAAQ3B,UAEnB,uBAAM+C,EAAGoE,EAAoBK,EAAGJ,EAAoBZ,KAAMA,EAAMiB,WAAYN,EAAqBjB,EAAK,QAAU,MAAOwB,iBAAiB,UAAxI,cACI,IAAI9B,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OAAO3D,EAAQO,OAD3G,OAGA,sBAAMa,EAAGuE,EAAkBE,EAAGD,EAAkBf,KAAK,QAAQiB,WAAYH,EAAmBpB,EAAK,QAAU,MAAOwB,iBAAiB,UAAnI,oBACiB,IAAVnB,GAAeoB,QAAQ,GAD9B,WAON,SAASC,GAAmB5H,EAAQlB,EAAOyB,EAAUxD,EAAM0B,GACzD,IAAMQ,EAAQR,EAAOY,MAAK,SAAAJ,GAAK,OAAMA,EAAMC,OAASqB,GAActB,EAAMM,OAAST,GAAWG,EAAMlC,OAASA,EAAK6C,MAAM,EAAG,OACzH,OAAKX,EAIEa,IAAUE,GAAQG,MAAML,IAAUb,EAAM4I,KAAK7H,QAAQkB,KAAKpB,IAAUb,EAAMc,MAAMC,SAASE,UAAUJ,IAAU,KAAKzC,cAAc,GAAGuE,YAHxIjB,QAAQsD,MAAR,mDAA0DjE,EAA1D,oBAA4ElB,EAA5E,uBAAgGyB,EAAhG,mBAAmHxD,EAAnH,6BAA4I0B,EAAO6C,SAC5I,GA6ZIwG,OAxZf,WAAgB,IAAD,EACeC,wBAASC,GADxB,mBACNC,EADM,KACEC,EADF,OAEqBH,mBAAS,CAAE1G,KAAMvE,IAAO0C,IAAI,cAAcC,QAAQ,OAAQ0I,GAAIrL,IAAO0C,MAAMkB,MAAM,SAFtG,mBAEN0H,EAFM,KAEKC,EAFL,OAGmBN,mBAASxD,EAAQ+D,IAAI,aAAe,OAHvD,mBAGN/H,EAHM,KAGIgI,EAHJ,OAIeR,mBAASS,OAAOC,SAASC,KAAKC,MAAM,kBAAoBH,OAAOC,SAASC,KAAKE,MAAM,KAAK5G,MAAQuC,EAAQ+D,IAAI,SAAW,oCAJtI,mBAINlG,EAJM,KAIEyG,EAJF,OAK2Bd,wBAASC,GALpC,mBAKNc,EALM,KAKQC,EALR,KA6Bb,OAvBAC,qBAAU,WACJf,GACFzF,MAAM,+EAA+EC,MAAK,SAAAwG,GAAI,OAAIf,EAAUe,EAAKC,WAASlF,MAAMrD,QAAQsD,SAEzI,CAACgE,IACJe,qBAAU,WACHzI,GAAYA,EAASoI,MAAM,eAAiBpE,EAAQ+D,IAAI,cAAgB/H,GAC3EgE,EAAQ4E,IAAI,WAAY5I,EAAU,CAAE6I,KAAM,QAE3C,CAAC7I,IACJyI,qBAAU,WACH5G,GAAUA,EAAOuG,MAAM,mBAAqBpE,EAAQ+D,IAAI,UAAYlG,GACvEmC,EAAQ4E,IAAI,OAAQ/G,EAAQ,CAAEgH,KAAM,QAErC,CAAChH,IACJ4G,qBAAU,WACF5G,GAAUA,EAAOuG,MAAM,mBAC3BpK,EACG8K,SAASjH,GACTK,KAAKsG,GACL/E,MAAMrD,QAAQsD,SAElB,CAAC7B,IAEF,eAACkH,EAAA,EAAD,CAAWC,OAAK,EAAhB,UACE,eAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAA1B,UACE,cAACF,EAAA,EAAOG,MAAR,CAAcjB,KAAK,IAAnB,8BACA,cAACkB,EAAA,EAAD,CAAKjE,UAAU,YAEf,eAACkE,EAAA,EAAD,CAAMC,QAAM,EAAZ,UACE,cAACD,EAAA,EAAKE,QAAN,CACEC,KAAK,OACLhF,MAAO,CAACI,MAAO,OACfO,UAAU,UACVsE,KAAK,KACLC,UAAU,EACVhI,MAAOpF,IAAO0C,IAAI4I,EAAU/G,MAAM1B,cAAcC,MAAM,EAAG,IACzDuK,SACE,SAACC,GACC,IAAM/I,EAAO+I,EAAMC,OAAOnI,MACtBb,EAAKsH,MAAM,wCACbN,GAAa,SAAAiC,GAAU,kCAClBA,GADkB,IAErBjJ,KAAMvE,IAAO0C,IAAI6B,GAAM5B,QAAQ,eAKzC,cAACoK,EAAA,EAAKE,QAAN,CACEC,KAAK,OACLhF,MAAO,CAACI,MAAO,OACfO,UAAU,UACVsE,KAAK,KACLC,UAAU,EACVK,aAAczN,IAAO0C,IAAI4I,EAAUD,IAAIxI,cAAcC,MAAM,EAAG,IAC9DuK,SACE,SAACC,GACC,IAAMjC,EAAKiC,EAAMC,OAAOnI,MACpBiG,EAAGQ,MAAM,wCACXN,GAAa,SAAAiC,GAAU,kCAClBA,GADkB,IAErBnC,GAAIrL,IAAO0C,IAAI2I,GAAIzH,MAAM,eAKnC,cAACmJ,EAAA,EAAKE,QAAN,CACEC,KAAK,OACLQ,YAAY,UACZxF,MAAO,CAACI,MAAO,QACfO,UAAU,UACVsE,KAAK,KACLC,UAAU,EACVK,aAAcnI,EACd+H,SACE,SAACC,GACC,IAAMhI,EAASgI,EAAMC,OAAOnI,MACxBE,EAAOuG,MAAM,mBACfE,EAAUzG,MAIlB,eAACyH,EAAA,EAAKE,QAAN,CACEU,GAAG,SACH9E,UAAU,UACVsE,KAAK,KACLM,aAAchK,EACd4J,SACE,SAACC,GACC,IAAM7J,EAAW6J,EAAMC,OAAOnI,MAC1B3B,EAASoI,MAAM,eACjBJ,EAAYhI,IATpB,UAaE,yCACA,yCACA,kDAIN,cAACmK,EAAA,EAAD,UAEO5B,GAAkBA,EAAa/G,cAE5B,eAAC4I,EAAA,EAAD,CAAOC,OAAK,EAACX,KAAK,KAAKjF,MAAO,CAAC6F,OAAQ,uBAAvC,UACE,gCACE,+BACE,qBAAI7F,MAAO,CAAEU,MAAOjB,EAAO5C,OAA3B,UACG,IAAI+D,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OAAOwD,EAAa/G,cAAcF,MAAMtB,GAAU2B,OAC3I,uBAAM8C,MAAO,CAAE8F,WAAY,MAAOpF,MAAQoD,EAAa/G,cAAcF,MAAMtB,GAAUV,OAAOsC,IAAM,EAAK,QAAW2G,EAAa/G,cAAcF,MAAMtB,GAAUV,OAAOsC,IAAM,EAAK,MAAQ,SAAvL,UACE,cAAC,IAAD,CAAiB4I,KAAM,CAAC,MAAQjC,EAAa/G,cAAcF,MAAMtB,GAAUV,OAAOsC,IAAM,EAAK,WAAc2G,EAAa/G,cAAcF,MAAMtB,GAAUV,OAAOsC,IAAM,EAAK,aAAe,YACtL2G,EAAa/G,cAAcF,MAAMtB,GAAUV,OAAOsC,IAAIwF,QAAQ,GAFjE,UAMAtH,OAAOwC,KAAKiG,EAAa/G,eAAehB,QAAO,SAAAjC,GAAK,MAAe,UAAVA,KAAoBF,KAAI,SAAAE,GAAK,OACpF,eAAC,IAAMkM,SAAP,WACE,oBAAIrF,UAAU,aAAd,SACE,cAACsF,EAAA,EAAD,CAAOC,IAAG,UAAKpM,EAAL,QAAkBqM,IAAG,UAAKrM,EAAL,SAAmBkG,MAAO,CAACoG,OAAQ,OAAQhG,MAAO,QAASiG,eAAa,MAEzG,oBAAI1F,UAAU,YAAYX,MAAO,CAAEU,MAAOjB,EAAO3F,IAAjD,SACGA,MALgBA,WAY7B,kCACE,+BACE,iDAIEuB,OAAOwC,KAAKiG,EAAa/G,eAAehB,QAAO,SAAAjC,GAAK,MAAe,UAAVA,KAAoBF,KAAI,SAAAE,GAAK,OACpF,eAAC,IAAMkM,SAAP,WACE,oBAAIrF,UAAU,aAAaX,MAAO,CAAEU,MAAOjB,EAAO3F,IAAlD,SACG,IAAI8G,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OAAOwD,EAAa/G,cAAcjD,GAAOyB,GAAU2B,SAE9I,qBACE8C,MAAO,CACLU,MAAQoD,EAAa/G,cAAcjD,GAAOyB,GAAUV,OAAOsC,IAAM,EAAK,QAAW2G,EAAa/G,cAAcjD,GAAOyB,GAAUV,OAAOsC,IAAM,EAAK,MAAQ,SAF3J,UAIE,cAAC,IAAD,CAAiB4I,KAAM,CAAC,MAAQjC,EAAa/G,cAAcjD,GAAOyB,GAAUV,OAAOsC,IAAM,EAAK,WAAc2G,EAAa/G,cAAcjD,GAAOyB,GAAUV,OAAOsC,IAAM,EAAK,aAAe,YACxL2G,EAAa/G,cAAcjD,GAAOyB,GAAUV,OAAOsC,IAAIwF,QAAQ,GALlE,SAJmB7I,SAe3B,+BACE,8CAIEuB,OAAOwC,KAAKiG,EAAa/G,eAAehB,QAAO,SAAAjC,GAAK,MAAe,UAAVA,KAAoBF,KAAI,SAAAE,GAAK,OACpF,cAD0F,CACzF,IAAMkM,SAAP,WACE,oBACErF,UAAU,aACVX,MAAO,CACLU,MAAOjB,EAAO3F,GACdsG,MAAM,GAAD,OAAM,IAAM/E,OAAOwC,KAAKiG,EAAa/G,eAAeT,OAAS,EAA7D,MAJT,SAMG,IAAIsE,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OAAOwD,EAAa1I,aAAatB,GAAOyB,GAAUR,MAAMC,UAEnJ,qBACEgF,MAAO,CACLI,MAAM,GAAD,OAAM,IAAM/E,OAAOwC,KAAKiG,EAAa/G,eAAeT,OAAS,EAA7D,KACLoE,MAAQoD,EAAa1I,aAAatB,GAAOyB,GAAUV,OAAS,EAAK,QAAWiJ,EAAa1I,aAAatB,GAAOyB,GAAUV,OAAS,EAAK,MAAQ,SAHjJ,UAKE,cAAC,IAAD,CAAiBkL,KAAM,CAAC,MAAQjC,EAAa1I,aAAatB,GAAOyB,GAAUV,OAAS,EAAK,WAAciJ,EAAa1I,aAAatB,GAAOyB,GAAUV,OAAS,EAAK,aAAe,YAC9KiJ,EAAa1I,aAAatB,GAAOyB,GAAUV,OAAO8H,QAAQ,GAN7D,SATmB7I,YAsB7B,gCACE,+BACE,mDAEEuB,OAAOwC,KAAKiG,EAAa/G,eAAehB,QAAO,SAAAjC,GAAK,MAAe,UAAVA,KAAoBF,KAAI,SAAAE,GAAK,OACpF,aAD0F,CACzF,IAAMkM,SAAP,UACE,qBAAI3F,QAAQ,IAAIM,UAAU,cAAcX,MAAO,CAAEU,MAAOjB,EAAO3F,IAA/D,UAEIhC,IAAO0C,IAAIsJ,EAAa1I,aAAatB,GAAOyB,GAAUR,MAAMuL,MAAMhG,OAAO,WAAWC,cAFxF,MAIIzI,IAAO0C,IAAIsJ,EAAa1I,aAAatB,GAAOyB,GAAUR,MAAMuL,MAAMhG,OAAOxI,IAAOyO,UAAUC,cAJ9F,WADmB1M,cAgB/B,cAAC2M,EAAA,EAAD,CAASC,UAAU,WAI7B,eAAChB,EAAA,EAAD,WACE,cAACiB,EAAA,EAAD,CAAKC,GAAI,EAAT,SAEO9C,GAAkBA,EAAa/G,cAE5B,cAAC8J,EAAA,EAAD,CAAqBzG,MAAM,OAAO0G,UAAU,QAA5C,SACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CACEC,KAAM5L,OAAOwC,KAAKiG,EAAa/G,eAAehB,QAAO,SAAAjC,GAAK,MAAe,UAAVA,KAAoBF,KAAI,SAAAE,GAAK,OAAIgK,EAAa/G,cAAcjD,GAAOyB,MAClI2F,GAAG,MACHC,GAAG,MACHpB,MAAOkB,EACPK,YAAa,GACb4F,QAAQ,QANV,SAQI7L,OAAOwC,KAAKiG,EAAa/G,eAAenD,KAAI,SAAAE,GAAK,OAC/C,cAACqN,EAAA,EAAD,CAEE3F,KAAM/B,EAAO3F,GACbA,MAAOA,EACPyB,SAAUA,EACVoB,QAASmH,EAAa/G,cAAcjD,GAAOyB,IAJtCzB,YAYjB,cAAC2M,EAAA,EAAD,CAASC,UAAU,WAI7B,cAACC,EAAA,EAAD,CAAKC,GAAI,EAAT,SAEO9C,GAAkBA,EAAa3H,SAASG,OAErC,cAACuK,EAAA,EAAD,CAAqBzG,MAAM,OAAO0G,UAAU,QAA5C,SACE,eAACM,EAAA,EAAD,CACEH,KAAMnD,EAAa3H,SAASJ,QAAO,SAAAY,GAAO,OAAI7E,IAAO6E,EAAQ5E,MAAMsP,UAAUjE,EAAU/G,KAAM+G,EAAUD,OACvG0C,OAAQ,CAAEyB,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,IAFlD,UAGE,cAACC,EAAA,EAAD,CAAeC,gBAAgB,QAC/B,cAACC,EAAA,EAAD,CACEV,QAAQ,OACRW,KAAM,CAAEC,SAAU,IAClBC,cAAe,SAAAF,GAAI,OAAI/P,IAAO+P,GAAMvH,OAAO,SAASC,iBACtD,cAACyH,EAAA,EAAD,CACEC,QAAQ,OACRJ,KAAM,CAAEC,SAAU,IAClBC,cAAe,SAAAF,GAAI,OAAI,IAAIjH,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OAAOuH,MACxH,cAACG,EAAA,EAAD,CACEC,QAAQ,QACRC,YAAY,QACZP,gBAAgB,MAChBE,KAAM,CAAEC,SAAU,IAClBC,cAAe,SAAAF,GAAI,OAAI,IAAIjH,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OAAOuH,MACxH,cAACM,EAAA,EAAD,CAAShK,QAAS,cAAC,EAAD,IAAmB5C,SAAUA,IAC/C,cAAC6M,EAAA,EAAD,IAEEtE,EAAapK,OAAOE,KAAI,SAAAE,GAAK,OAC3B,cAACuO,EAAA,EAAD,CAAMJ,QAAQ,OAAOjD,KAAK,WAAWxE,KAAI,UAAK1G,GAASoN,QAAO,UAAKpN,EAAL,YAAcyB,GAAY3C,KAAK,EAAO0P,OAAQ7I,EAAO3F,IAAU2F,EAAM,SAAkB3F,MAGzJ,cAACuO,EAAA,EAAD,CAAMJ,QAAQ,QAAQjD,KAAK,WAAWxE,KAAI,QAAW0G,QAAO,gBAAW3L,GAAYoM,gBAAgB,MAAM/O,KAAK,EAAO0P,OAAQ7I,EAAM,aAKvI,cAACgH,EAAA,EAAD,CAASC,UAAU,cAK/B,cAAChB,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,CAAO4C,SAAO,EAACC,UAAQ,EAAC5C,OAAK,EAACX,KAAK,KAAKjF,MAAO,CAAC6F,OAAQ,uBAAxD,UACE,kCACE,6BACE,oBAAIxF,QAAQ,IAAIM,UAAU,aAA1B,mCAIF,+BACE,sCAGA,uCAGA,sCAGA,oBAAIA,UAAU,aAAd,0BAGA,qBAAIA,UAAU,aAAd,UACGpF,EADH,mBAKJ,gCAEOuI,GAAkBA,EAAatK,aAAa8C,OAC3CwH,EAAatK,aAAauC,QAAO,SAAA0M,GAAW,OAAI3Q,IAAO2Q,EAAY1Q,MAAMsP,UAAUjE,EAAU/G,KAAM+G,EAAUD,OAAKvJ,KAAI,SAACC,EAAI6O,GAAL,OACpH,+BACE,6BACG7O,EAAG9B,OAEN,6BACG8B,EAAGuE,QAEN,6BACGvE,EAAG8O,OAEN,qBAAIhI,UAAU,aAAaX,MAAO,CAACU,MAAQjB,EAAO5F,EAAGC,QAAU2F,EAAOC,SAAtE,UACG7F,EAAGC,MADN,IACcD,EAAGmB,UAEjB,oBAAI2F,UAAU,aAAaX,MAAO,CAACU,MAAQjB,EAAO5F,EAAGC,QAAU2F,EAAOC,SAAtE,SAEI,IAAIkB,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OACtFsC,GAAmB/I,EAAGmB,OAAQnB,EAAGC,MAAOyB,EAAU1B,EAAG9B,KAAM+L,EAAarK,aAhBvEiP,MAsBX,YAKZ,cAAChD,EAAA,EAAD,UAEO5B,GAAkBA,EAAa3H,SAASG,OAErC,eAACqJ,EAAA,EAAD,CAAO4C,SAAO,EAACC,UAAQ,EAAC5C,OAAK,EAACX,KAAK,KAAKjF,MAAO,CAAC6F,OAAQ,uBAAxD,UACE,kCACE,6BACE,oBAAIxF,QAAUyD,EAAapK,OAAO4C,OAAS,EAAIqE,UAAU,aAAzD,+BAIF,+BACE,sCAEEmD,EAAapK,OAAOE,KAAI,SAAAE,GAAK,OAC3B,oBAAgB6G,UAAU,aAA1B,SACG7G,GADMA,MAKb,oBAAI6G,UAAU,aAAd,yBAGJ,gCAEImD,EAAa3H,SAASJ,QAAO,SAAAY,GAAO,OAAI7E,IAAO6E,EAAQ5E,MAAMsP,UAAUjE,EAAU/G,KAAM+G,EAAUD,OAAKvJ,KAAI,SAAC+C,GAAD,OACxG,+BACE,6BAAKA,EAAQ5E,OAEX+L,EAAapK,OAAOE,KAAI,SAAAE,GAAK,OAC3B,qBAAqC6G,UAAU,aAAaX,MAAO,CAACU,MAAQjB,EAAO3F,IAAU2F,EAAOC,SAApG,UACE,sBAAMiB,UAAU,aAAaX,MAAO,CAAC4I,YAAa,OAAlD,SACGjM,EAAQ7C,GAAOA,KAEjB,IAAI8G,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OAAO3D,EAAQ7C,GAAOyB,IAAa,KAJ9H,UAAYoB,EAAQ5E,KAApB,YAA4B+B,OAQhC,oBAAI6G,UAAU,aAAaX,MAAO,CAACU,MAAOjB,EAAO5C,OAAjD,SACG,IAAI+D,KAAKC,aAAa,QAAS,CAAEb,MAAO,WAAYzE,SAAUA,EAASuF,gBAAiBR,OAAO3D,EAAQE,MAAMtB,IAAa,OAbtHoB,EAAQ5E,cAqB3B,OAGR,cAAC2N,EAAA,EAAD,UACE,cAACiB,EAAA,EAAD,UAEO1D,EAEG,cAAC,IAAD,CAAe4F,OAAQ5F,IAGvB,cAACwD,EAAA,EAAD,CAASC,UAAU,iBCzgBtBoC,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBvL,MAAK,YAAkD,IAA/CwL,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,GAAD,MAEFC,SAASC,eAAe,SAM1BZ,O","file":"static/js/main.6082b684.chunk.js","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport moment from 'moment';\nimport {\n  Stitch,\n  AnonymousCredential,\n  RemoteMongoClient\n} from 'mongodb-stitch-browser-sdk';\n\nconst appClient = Stitch.initializeDefaultAppClient('grenade-tnats');\nconst svcClient = appClient.getServiceClient(RemoteMongoClient.factory, 'mongodb-atlas-grenade-stitch');\n\nconst dateSorter = (a, b) => (\n    (moment(a.date) < moment(b.date))\n        ? -1\n        : (moment(a.date) > moment(b.date))\n            ? 1\n            : 0\n);\n\nconst coinUnitMap = {\n    algo: {\n        monetary: {\n            unit: 'algo',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    band: {\n        monetary: {\n            unit: 'band',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    bch: {\n        monetary: {\n            unit: 'bch',\n        },\n        fractional: {\n            unit: 'satoshi',\n            decimalPlaces: 8,\n        },\n    },\n    btc: {\n        monetary: {\n            unit: 'btc',\n        },\n        fractional: {\n            unit: 'satoshi',\n            decimalPlaces: 8,\n        },\n    },\n    celo: {\n        monetary: {\n            unit: 'celo',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    comp: {\n        monetary: {\n            unit: 'comp',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    dash: {\n        monetary: {\n            unit: 'dash',\n        },\n        fractional: {\n            unit: 'duff',\n            decimalPlaces: 8,\n        },\n    },\n    dot: {\n        monetary: {\n            unit: 'dot',\n        },\n        fractional: {\n            unit: 'planck',\n            decimalPlaces: 10,\n        },\n    },\n    eth: {\n        monetary: {\n            unit: 'eth',\n        },\n        fractional: {\n            unit: 'wei',\n            decimalPlaces: 18,\n        },\n    },\n    grt: {\n        monetary: {\n            unit: 'grt',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    ksm: {\n        monetary: {\n            unit: 'ksm',\n        },\n        fractional: {\n            unit: 'planck',\n            decimalPlaces: 12,\n        },\n    },\n    ltc: {\n        monetary: {\n            unit: 'ltc',\n        },\n        fractional: {\n            unit: 'litoshi',\n            decimalPlaces: 8,\n        },\n    },\n    mkr: {\n        monetary: {\n            unit: 'mkr',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    nu: {\n        monetary: {\n            unit: 'nu',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    uma: {\n        monetary: {\n            unit: 'uma',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: 18,\n        },\n    },\n    xlm: {\n        monetary: {\n            unit: 'xlm',\n        },\n        fractional: {\n            unit: 'stroop',\n            decimalPlaces: 7,\n        },\n    },\n    xrp: {\n        monetary: {\n            unit: 'xrp',\n        },\n        fractional: {\n            unit: 'drop',\n            decimalPlaces: 6,\n        },\n    },\n    zec: {\n        monetary: {\n            unit: 'zec',\n        },\n        fractional: {\n            unit: 'zatoshi',\n            decimalPlaces: 8,\n        },\n    },\n};\n\nexport default class AssetTracker {\n    constructor(transactions, quotes) {\n        const assets = [...new Set(transactions.map(tx => tx.asset))].sort();\n        const currencies = [...new Set(quotes.map(quote => quote.fiat))].sort();\n        this.assets = assets;\n        this.quotes = quotes.map((quote) => {\n            const quoteYesterday = quotes.find(candidate => ((candidate.coin === quote.coin) && (candidate.fiat === quote.fiat) && (candidate.date === moment.utc(quote.date).startOf('day').subtract(1, 'day').toISOString().slice(0, 10))))\n            return {\n                ...quote,\n                change: (!!quoteYesterday) ? ((BigNumber(quote.close.amount).minus(BigNumber(quoteYesterday.close.amount))).dividedBy(BigNumber(quoteYesterday.close.amount)).times(100)) : 0\n            };\n        });\n        this.todaysQuotes = Object.fromEntries(assets.map(asset => [\n            asset,\n            Object.fromEntries(currencies.map(currency => [\n                currency,\n                this.quotes.find(quote => ((quote.coin === asset) && (quote.fiat === currency) && (quote.date === moment.utc().startOf('day').toISOString().slice(0, 10))))\n            ]))\n        ]));\n        this.currencies = currencies;\n        this.transactions = transactions.sort(dateSorter);\n        this.earliestDate = moment.utc(this.transactions[0].date).startOf('day').toISOString().slice(0, 10);\n        this.latestDate = moment.utc().endOf('day').toISOString();\n        console.log(`earliest: ${this.earliestDate}, latest: ${this.latestDate}`);\n        this.quoteAtDate = (asset, currency, date) => this.quotes\n            .find(quote => ((quote.coin === asset) && (quote.fiat === currency) && (quote.date === date)));\n        this.balanceAtDate = (asset, date) => this.transactions\n            .filter(tx => ((tx.asset === asset) && (moment.utc(tx.date) <= date)))\n            .reduce((accumulator, tx) => accumulator.plus(new BigNumber(tx.amount)), new BigNumber(0));\n        this.balances = Array.from(\n            {\n                length: ((moment(this.latestDate).startOf('day').diff(moment(this.earliestDate).startOf('day'), 'days')) + 1)\n            },\n            (v, i) => moment(this.earliestDate).startOf('day').add(i, 'days').toISOString().slice(0, 10)\n        ).map(date => ({\n            // todo: filter out assets where balance is always zero\n            ...Object.fromEntries(this.assets.map(asset => {\n                const balance = this.balanceAtDate(asset, moment.utc(date).endOf('day'));\n                return [\n                    asset,\n                    {\n                        ...Object.fromEntries(quotes.filter(quote => ((quote.coin === asset) && (quote.date === date))).map(quote => [\n                            quote.fiat,\n                            balance.times(BigNumber(quote.close.amount)).decimalPlaces(2).toNumber() || BigNumber(0).toNumber()\n                        ])),\n                        [asset]: balance.toNumber(),\n                    }\n                ];\n            })),\n            date,\n        })).map(balance => ({\n            ...balance,\n            total: Object.fromEntries(currencies.map(currency => [\n                currency,\n                assets.reduce((acc, asset) => acc + (balance[asset][currency] || 0), 0)\n            ]))\n        }));\n        const latestBalance = [...this.balances].pop();\n        const penultimateBalance = [...this.balances].slice(-2, -1)[0];\n        this.latestBalance = Object.fromEntries([...assets, ...['total']].filter(asset => ((asset === 'total') || (!!latestBalance[asset][asset]))).map(asset => [\n            asset,\n            Object.fromEntries(currencies.map(currency => [\n                currency,\n                {\n                    amount: (asset !== 'total') ? latestBalance[asset][asset] : 0,\n                    value: latestBalance[asset][currency],\n                    change: {\n                        day: ((latestBalance[asset][currency] - (penultimateBalance[asset][currency] || 0)) / (penultimateBalance[asset][currency] || 0) * 100)\n                    }\n                }\n            ]))\n        ]));\n    }\n\n    static fromGist(gistId) {\n        return new Promise((resolve , reject) => {\n            fetch(`https://api.github.com/gists/${gistId}`)\n                .then((response) => response.json())\n                .then((gist) => {\n                    const transactions = Object.keys(gist.files)\n                        .filter(x => x.endsWith('.json'))\n                        .map(x => JSON.parse(gist.files[x].content).map(tx => ({ ...tx, vault: x.slice(0, -5) })))\n                        .reduce((acc, tx) => [...acc, ...tx])\n                        .filter(tx => Object.keys(coinUnitMap).includes(tx.asset))\n                        .sort(dateSorter);\n                    const assets = [...new Set(transactions.map(tx => tx.asset))];\n                    const earliestDate = moment.utc(transactions[0].date).startOf('day').toISOString().slice(0, 10);\n                    const latestDate = moment.utc().endOf('day').toISOString().slice(0, 10);\n                    appClient.auth\n                        .loginWithCredential(new AnonymousCredential())\n                        .then(() => {\n                            svcClient.db('grenade')\n                                .collection('quote')\n                                .find(\n                                    {\n                                        $and: [\n                                            {\n                                                coin: {\n                                                    $in: assets\n                                                }\n                                            },\n                                            {\n                                                date: {\n                                                    $gte: earliestDate\n                                                }\n                                            },\n                                            {\n                                                date: {\n                                                    $lte: latestDate\n                                                }\n                                            }\n                                        ]\n                                    }\n                                )\n                                .asArray()\n                                .then(quotes => {\n                                    resolve(new AssetTracker(transactions, quotes));\n                                });\n                        });\n                })\n                .catch((error) => {\n                    reject(error);\n                });          \n        });\n    }\n};","import React, { useState, useEffect } from 'react';\nimport BigNumber from \"bignumber.js\";\nimport Cookies from 'universal-cookie';\nimport moment from 'moment';\n\n// bootstrap\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Image from 'react-bootstrap/Image';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Row from 'react-bootstrap/Row';\nimport Spinner from 'react-bootstrap/Spinner';\nimport Table from 'react-bootstrap/Table';\n\n// react-markdown\nimport ReactMarkdown from 'react-markdown';\n\n// recharts\nimport { PieChart, Pie, Cell, LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport AssetTracker from './AssetTracker';\n\n// fontawesome\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { fas, faCaretUp, faCaretDown, faCircle } from '@fortawesome/free-solid-svg-icons';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nlibrary.add(fas, faCaretDown);\nlibrary.add(fas, faCaretUp);\nlibrary.add(fas, faCircle);\n\nconst cookies = new Cookies();\nconst colors = {\n  bch: '#8dc351',\n  btc: '#f7931a',\n  dash: '#008ce7',\n  dot: '#e71081',\n  eth: '#444eec',\n  ksm: '#8015ab',\n  ltc: '#345d9d',\n  uma: '#fe4b49',\n  xlm: '#14b6e7',\n  xrp: '#23292f',\n  zec: '#ecb244',\n  total: '#999999',\n  default: '#cccccc',\n};\n\nconst CustomToolTip = props => {\n  const { active, payload, label, currency } = props;\n  if (!active || !payload) {\n    return null;\n  }\n  return (\n    <div style={{\n      backgroundColor: '#ffffff',\n      padding: '1em',\n      border: '1px solid #cccccc',\n    }}>\n      <table style={{width: '100%'}}>\n        <thead>\n          <tr>\n            <th colSpan=\"2\">\n              {moment(label).format(\"MMMM Do, YYYY\").toLowerCase()}\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {\n            payload.filter(x => x.name !== 'total' && x.value > 0).map((item) => (\n              <tr key={item.name} style={{ color: (colors[item.name] || colors['default']) }}>\n                <td>\n                  {item.name}\n                </td>\n                <td className=\"text-right\">\n                  {Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(item.value)}\n                </td>\n              </tr>\n            ))\n          }\n        </tbody>\n        <tfoot>\n          <tr style={{ color: colors.total, borderBottom: `1px dashed ${colors.total}`, borderTop: `1px dashed ${colors.total}` }}>\n            <th>\n              total\n            </th>\n            <th className=\"text-right\">\n              {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(payload.find((item) => item.name === 'total').value)}\n            </th>\n          </tr>\n        </tfoot>\n      </table>\n    </div>\n  );\n};\n\nconst CustomPieLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, index, fill, asset, currency, balance }) => {\n  const RADIAN = Math.PI / 180;\n\n  const radiusForCoinValueLabel = innerRadius + (outerRadius - innerRadius) * 2;\n  const xForCoinValueLabel = cx + radiusForCoinValueLabel * Math.cos(-midAngle * RADIAN);\n  const yForCoinValueLabel = cy + radiusForCoinValueLabel * Math.sin(-midAngle * RADIAN);\n\n  const radiusForFiatValueLabel = innerRadius + (outerRadius - innerRadius) * 1.2;\n  const xForFiatValueLabel = cx + radiusForFiatValueLabel * Math.cos(-midAngle * RADIAN);\n  const yForFiatValueLabel = cy + radiusForFiatValueLabel * Math.sin(-midAngle * RADIAN);\n\n  const radiusForPercentLabel = innerRadius + (outerRadius - innerRadius) * 0.5;\n  const xForPercentLabel = cx + radiusForPercentLabel * Math.cos(-midAngle * RADIAN);\n  const yForPercentLabel = cy + radiusForPercentLabel * Math.sin(-midAngle * RADIAN);\n  return (\n    <>\n      <text x={xForCoinValueLabel} y={yForCoinValueLabel} fill={fill} textAnchor={xForCoinValueLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        {asset} {balance.amount}\n      </text>\n      <text x={xForFiatValueLabel} y={yForFiatValueLabel} fill={fill} textAnchor={xForFiatValueLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        ({new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(balance.value)})\n      </text>\n      <text x={xForPercentLabel} y={yForPercentLabel} fill=\"white\" textAnchor={xForPercentLabel > cx ? 'start' : 'end'} dominantBaseline=\"central\">\n        {`${(percent * 100).toFixed(0)}%`}\n      </text>\n    </>\n  );\n};\n\nfunction getHistoricalValue(amount, asset, currency, date, quotes) {\n  const quote = quotes.find(quote => ((quote.fiat === currency) && (quote.coin === asset) && (quote.date === date.slice(0, 10))));\n  if (!quote) {\n    console.error(`failed to find quote using args: amount: ${amount}, asset: ${asset}, currency: ${currency}, date: ${date}, quotes.length,: ${quotes.length}`);\n    return 0;\n  }\n  return BigNumber(amount).times(BigNumber(quote.open.amount).plus(BigNumber(quote.close.amount)).dividedBy(BigNumber(2))).decimalPlaces(2).toNumber();\n}\n\nfunction App() {\n  const [footer, setFooter] = useState(undefined);\n  const [dateRange, setDateRange] = useState({ from: moment.utc('2020-11-11').startOf('day'), to: moment.utc().endOf('day') });\n  const [currency, setCurrency] = useState(cookies.get('currency') || 'eur');\n  const [gistId, setGistId] = useState(window.location.href.match(/#[a-f0-9]{32}$/) ? window.location.href.split('#').pop() : cookies.get('gist') || '8272a8540d65584f16a2d3f6b9c34e4c');\n  const [assetTracker, setAssetTracker] = useState(undefined);\n  useEffect(() => {\n    if(!footer) {\n      fetch(`https://raw.githubusercontent.com/thgttg/thgttg-react/main/public/footer.md`).then(body => setFooter(body.text())).catch(console.error);\n    }\n  }, [footer]);\n  useEffect(() => {\n    if(!!currency && currency.match(/^[a-z]{3}$/) && cookies.get('currency') !== currency) {\n      cookies.set('currency', currency, { path: '/' });\n    }\n  }, [currency]);\n  useEffect(() => {\n    if(!!gistId && gistId.match(/^[a-f0-9]{32}$/) && cookies.get('gist') !== gistId) {\n      cookies.set('gist', gistId, { path: '/' });\n    }\n  }, [gistId]);\n  useEffect(() => {\n    if (!!gistId && gistId.match(/^[a-f0-9]{32}$/)) {\n      AssetTracker\n        .fromGist(gistId)\n        .then(setAssetTracker)\n        .catch(console.error);\n    }\n  }, [gistId]);\n  return (\n    <Container fluid>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#\">don&rsquo;t panic</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n        </Nav>\n        <Form inline>\n          <Form.Control\n            type=\"text\"\n            style={{width: '7em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            value={moment.utc(dateRange.from).toISOString().slice(0, 10)}\n            onChange={\n              (event) => {\n                const from = event.target.value;\n                if (from.match(/^20[12][0-9]-[01][0-9]-[0123][0-9]$/)) {\n                  setDateRange(_dateRange => ({\n                    ..._dateRange,\n                    from: moment.utc(from).startOf('day')\n                  }));\n                }\n              }\n            } />\n          <Form.Control\n            type=\"text\"\n            style={{width: '7em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={moment.utc(dateRange.to).toISOString().slice(0, 10)}\n            onChange={\n              (event) => {\n                const to = event.target.value;\n                if (to.match(/^20[12][0-9]-[01][0-9]-[0123][0-9]$/)) {\n                  setDateRange(_dateRange => ({\n                    ..._dateRange,\n                    to: moment.utc(to).endOf('day')\n                  }));\n                }\n              }\n            } />\n          <Form.Control\n            type=\"text\"\n            placeholder=\"gist id\"\n            style={{width: '19em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={gistId}\n            onChange={\n              (event) => {\n                const gistId = event.target.value;\n                if (gistId.match(/^[a-f0-9]{32}$/)) {\n                  setGistId(gistId);\n                }\n              }\n            } />\n          <Form.Control\n            as=\"select\"\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            defaultValue={currency}\n            onChange={\n              (event) => {\n                const currency = event.target.value;\n                if (currency.match(/^[a-z]{3}$/)) {\n                  setCurrency(currency);\n                }\n              }\n            }>\n            <option>eur</option>\n            <option>gbp</option>\n            <option>usd</option>\n          </Form.Control>\n        </Form>\n      </Navbar>\n      <Row>\n        {\n          (!!assetTracker && !!assetTracker.latestBalance)\n            ? (\n                <Table hover size=\"sm\" style={{margin: '50px 10px 10px 10px'}}>\n                  <thead>\n                    <tr>\n                      <th style={{ color: colors.total }}>\n                        {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(assetTracker.latestBalance.total[currency].value)}\n                        <span style={{ marginLeft: '1em', color: (assetTracker.latestBalance.total[currency].change.day > 0) ? 'green' : (assetTracker.latestBalance.total[currency].change.day < 0) ? 'red' : 'black' }}>\n                          <FontAwesomeIcon icon={[\"fas\", (assetTracker.latestBalance.total[currency].change.day > 0) ? 'caret-up' : (assetTracker.latestBalance.total[currency].change.day < 0) ? 'caret-down' : 'circle']} />\n                          {assetTracker.latestBalance.total[currency].change.day.toFixed(2)}%\n                        </span>\n                      </th>\n                      {\n                        Object.keys(assetTracker.latestBalance).filter(asset => (asset !== 'total')).map(asset => (\n                          <React.Fragment key={asset}>\n                            <th className=\"text-right\">\n                              <Image src={`${asset}.png`} alt={`${asset} logo`} style={{height: '20px', width: '20px'}} roundedCircle />\n                            </th>\n                            <th className=\"text-left\" style={{ color: colors[asset] }}>\n                              {asset}\n                            </th>\n                          </React.Fragment>\n                        ))\n                      }\n                    </tr>\n                  </thead>\n                  <tbody>\n                    <tr>\n                      <th>\n                        portfolio value\n                      </th>\n                      {\n                        Object.keys(assetTracker.latestBalance).filter(asset => (asset !== 'total')).map(asset => (\n                          <React.Fragment key={asset}>\n                            <td className=\"text-right\" style={{ color: colors[asset] }}>\n                              {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(assetTracker.latestBalance[asset][currency].value)}\n                            </td>\n                            <td\n                              style={{\n                                color: (assetTracker.latestBalance[asset][currency].change.day > 0) ? 'green' : (assetTracker.latestBalance[asset][currency].change.day < 0) ? 'red' : 'black'\n                              }}>\n                              <FontAwesomeIcon icon={[\"fas\", (assetTracker.latestBalance[asset][currency].change.day > 0) ? 'caret-up' : (assetTracker.latestBalance[asset][currency].change.day < 0) ? 'caret-down' : 'circle']} />\n                              {assetTracker.latestBalance[asset][currency].change.day.toFixed(2)}%\n                            </td>\n                          </React.Fragment>\n                        ))\n                      }\n                    </tr>\n                    <tr>\n                      <th>\n                        market price\n                      </th>\n                      {\n                        Object.keys(assetTracker.latestBalance).filter(asset => (asset !== 'total')).map(asset => ( // using latest balance keys in order to filter out quotes for assets we hold no balance for\n                          <React.Fragment key={asset}>\n                            <td\n                              className=\"text-right\"\n                              style={{\n                                color: colors[asset],\n                                width: `${(100 / Object.keys(assetTracker.latestBalance).length / 2)}%`\n                              }}>\n                              {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(assetTracker.todaysQuotes[asset][currency].close.amount)}\n                            </td>\n                            <td\n                              style={{\n                                width: `${(100 / Object.keys(assetTracker.latestBalance).length / 2)}%`,\n                                color: (assetTracker.todaysQuotes[asset][currency].change > 0) ? 'green' : (assetTracker.todaysQuotes[asset][currency].change < 0) ? 'red' : 'black'\n                              }}>\n                              <FontAwesomeIcon icon={[\"fas\", (assetTracker.todaysQuotes[asset][currency].change > 0) ? 'caret-up' : (assetTracker.todaysQuotes[asset][currency].change < 0) ? 'caret-down' : 'circle']} />\n                              {assetTracker.todaysQuotes[asset][currency].change.toFixed(2)}%\n                            </td>\n                          </React.Fragment>\n                        ))\n                      }\n                    </tr>\n                  </tbody>\n                  <tfoot>\n                    <tr>\n                      <th>price observation</th>\n                      {\n                        Object.keys(assetTracker.latestBalance).filter(asset => (asset !== 'total')).map(asset => ( // using latest balance keys in order to filter out quotes for assets we hold no balance for\n                          <React.Fragment key={asset}>\n                            <td colSpan=\"2\" className=\"text-center\" style={{ color: colors[asset] }}>\n                              {\n                                moment.utc(assetTracker.todaysQuotes[asset][currency].close.time).format('MMMM Do').toLowerCase()\n                              } - {\n                                moment.utc(assetTracker.todaysQuotes[asset][currency].close.time).format(moment.HTML5_FMT.TIME_SECONDS)\n                              } utc\n                            </td>\n                          </React.Fragment>\n                        ))\n                      }\n                    </tr>\n                  </tfoot>\n                </Table>\n              )\n            : (\n                <Spinner animation=\"grow\" />\n              )\n        }\n      </Row>\n      <Row>\n        <Col sm={4}>\n          {\n            (!!assetTracker && !!assetTracker.latestBalance)\n              ? (\n                  <ResponsiveContainer width=\"100%\" minHeight=\"500px\">\n                    <PieChart>\n                      <Pie\n                        data={Object.keys(assetTracker.latestBalance).filter(asset => (asset !== 'total')).map(asset => assetTracker.latestBalance[asset][currency])}\n                        cx=\"50%\"\n                        cy=\"50%\"\n                        label={CustomPieLabel}\n                        outerRadius={80}\n                        dataKey=\"value\">\n                        {\n                          Object.keys(assetTracker.latestBalance).map(asset => (\n                            <Cell\n                              key={asset}\n                              fill={colors[asset]}\n                              asset={asset}\n                              currency={currency}\n                              balance={assetTracker.latestBalance[asset][currency]} />\n                          ))\n                        }\n                      </Pie>\n                    </PieChart>\n                  </ResponsiveContainer>\n                )\n              : (\n                  <Spinner animation=\"grow\" />\n                )\n          }\n        </Col>\n        <Col sm={8}>\n          {\n            (!!assetTracker && !!assetTracker.balances.length)\n              ? (\n                  <ResponsiveContainer width=\"100%\" minHeight=\"500px\">\n                    <LineChart\n                      data={assetTracker.balances.filter(balance => moment(balance.date).isBetween(dateRange.from, dateRange.to))}\n                      margin={{ top: 50, right: 10, left: 10, bottom: 10 }} >\n                      <CartesianGrid strokeDasharray=\"3 3\" />\n                      <XAxis\n                        dataKey=\"date\"\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={tick => moment(tick).format('MMM D').toLowerCase()} />\n                      <YAxis\n                        yAxisId=\"left\"\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={tick => new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(tick)} />\n                      <YAxis\n                        yAxisId=\"right\"\n                        orientation=\"right\"\n                        strokeDasharray=\"5 5\"\n                        tick={{ fontSize: 11 }}\n                        tickFormatter={tick => new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(tick)} />\n                      <Tooltip content={<CustomToolTip />} currency={currency} />\n                      <Legend />\n                      {\n                        assetTracker.assets.map(asset => (\n                          <Line yAxisId=\"left\" type=\"monotone\" name={`${asset}`} dataKey={`${asset}.${currency}`} dot={false} stroke={colors[asset] || colors['default']} key={asset} />\n                        ))\n                      }\n                      <Line yAxisId=\"right\" type=\"monotone\" name={`total`} dataKey={`total.${currency}`} strokeDasharray=\"5 5\" dot={false} stroke={colors['total']} />\n                    </LineChart>\n                  </ResponsiveContainer>\n                )\n              : (\n                  <Spinner animation=\"grow\" />\n                )\n          }\n        </Col>\n      </Row>\n      <Row>\n        <Table striped bordered hover size=\"sm\" style={{margin: '50px 10px 10px 10px'}}>\n          <thead>\n            <tr>\n              <th colSpan=\"5\" className=\"text-right\">\n                transaction history\n              </th>\n            </tr>\n            <tr>\n              <th>\n                date\n              </th>\n              <th>\n                vault\n              </th>\n              <th>\n                note\n              </th>\n              <th className=\"text-right\">\n                asset amount\n              </th>\n              <th className=\"text-right\">\n                {currency} amount\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              (!!assetTracker && !!assetTracker.transactions.length)\n                ? assetTracker.transactions.filter(transaction => moment(transaction.date).isBetween(dateRange.from, dateRange.to)).map((tx, key) => (\n                    <tr key={key}>\n                      <td>\n                        {tx.date}\n                      </td>\n                      <td>\n                        {tx.vault}\n                      </td>\n                      <td>\n                        {tx.note}\n                      </td>\n                      <td className=\"text-right\" style={{color: (colors[tx.asset] || colors.default)}}>\n                        {tx.asset} {tx.amount}\n                      </td>\n                      <td className=\"text-right\" style={{color: (colors[tx.asset] || colors.default)}}>\n                        {\n                          new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(\n                            getHistoricalValue(tx.amount, tx.asset, currency, tx.date, assetTracker.quotes)\n                          )\n                        }\n                      </td>\n                    </tr>\n                  ))\n                : null\n            }\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        {\n          (!!assetTracker && !!assetTracker.balances.length)\n            ? (\n                <Table striped bordered hover size=\"sm\" style={{margin: '50px 10px 10px 10px'}}>\n                  <thead>\n                    <tr>\n                      <th colSpan={(assetTracker.assets.length + 2)} className=\"text-right\">\n                        balance history\n                      </th>\n                    </tr>\n                    <tr>\n                      <th>date</th>\n                      {\n                        assetTracker.assets.map(asset => (\n                          <th key={asset} className=\"text-right\">\n                            {asset}\n                          </th>\n                        ))\n                      }\n                      <th className=\"text-right\">total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      assetTracker.balances.filter(balance => moment(balance.date).isBetween(dateRange.from, dateRange.to)).map((balance) => (\n                        <tr key={balance.date}>\n                          <th>{balance.date}</th>\n                          {\n                            assetTracker.assets.map(asset => (\n                              <td key={`${balance.date}-${asset}`} className=\"text-right\" style={{color: (colors[asset] || colors.default)}}>\n                                <span className=\"text-muted\" style={{marginRight: '1em'}}>\n                                  {balance[asset][asset]}\n                                </span>\n                                {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(balance[asset][currency] || 0)}\n                              </td>\n                            ))\n                          }\n                          <td className=\"text-right\" style={{color: colors.total}}>\n                            {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(balance.total[currency] || 0)}\n                          </td>\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              )\n            : null\n        }\n      </Row>\n      <Row>\n        <Col>\n          {\n            (!!footer)\n              ? (\n                  <ReactMarkdown source={footer} />\n                )\n              : (\n                  <Spinner animation=\"grow\" />\n                )\n          }\n        </Col>\n      </Row>\n\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}