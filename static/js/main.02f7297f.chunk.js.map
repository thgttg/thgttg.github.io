{"version":3,"sources":["AssetTracker.js","App.js","reportWebVitals.js","index.js"],"names":["appClient","Stitch","initializeDefaultAppClient","svcClient","getServiceClient","RemoteMongoClient","factory","dateSorter","a","b","moment","date","coinUnitMap","algo","monetary","unit","fractional","decimalPlaces","band","bch","btc","celo","comp","dash","dot","eth","grt","ksm","ltc","mkr","nu","xlm","xrp","zec","AssetTracker","transactions","quotes","this","sort","earliestDate","latestDate","assets","Set","map","tx","asset","balanceAtDate","filter","reduce","accumulator","plus","BigNumber","amount","interval","balances","Array","from","length","v","i","Date","valueOf","toISOString","slice","Object","fromEntries","close","setHours","balance","quote","coin","fiat","times","open","dividedBy","toNumber","gistId","Promise","resolve","reject","fetch","then","response","json","gist","keys","files","_filename","endsWith","JSON","parse","content","_transactions","_transaction","includes","auth","loginWithCredential","AnonymousCredential","db","collection","find","$and","$in","$gte","$lte","asArray","catch","error","cookies","Cookies","colors","default","CustomToolTip","props","active","payload","label","currency","style","backgroundColor","padding","border","format","toLowerCase","x","value","item","color","name","Intl","NumberFormat","toUpperCase","App","useState","to","dateRange","setDateRange","get","setCurrency","window","location","href","match","split","pop","setGistId","undefined","assetTracker","setAssetTracker","useEffect","set","path","fromGist","console","Container","fluid","Navbar","bg","variant","Brand","Nav","className","Form","inline","Control","type","width","size","disabled","onChange","event","target","_dateRange","placeholder","defaultValue","as","Row","ResponsiveContainer","minHeight","LineChart","data","isBetween","margin","top","right","left","bottom","CartesianGrid","strokeDasharray","XAxis","dataKey","tick","fontSize","tickFormatter","YAxis","Tooltip","Legend","Line","stroke","Table","striped","bordered","hover","colspan","transaction","key","note","marginRight","acc","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02f7297f.chunk.js","sourcesContent":["import BigNumber from \"bignumber.js\";\nimport moment from 'moment';\nimport {\n  Stitch,\n  AnonymousCredential,\n  RemoteMongoClient\n} from 'mongodb-stitch-browser-sdk';\n\nconst appClient = Stitch.initializeDefaultAppClient('grenade-tnats');\nconst svcClient = appClient.getServiceClient(RemoteMongoClient.factory, 'mongodb-atlas-grenade-stitch');\n\nconst dateSorter = (a, b) => (\n    (moment(a.date) < moment(b.date))\n        ? -1\n        : (moment(a.date) > moment(b.date))\n            ? 1\n            : 0\n);\n\nconst coinUnitMap = {\n    algo: {\n        monetary: {\n            unit: 'algo',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    band: {\n        monetary: {\n            unit: 'band',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    bch: {\n        monetary: {\n            unit: 'bch',\n        },\n        fractional: {\n            unit: 'satoshi',\n            decimalPlaces: 8,\n        },\n    },\n    btc: {\n        monetary: {\n            unit: 'btc',\n        },\n        fractional: {\n            unit: 'satoshi',\n            decimalPlaces: 8,\n        },\n    },\n    celo: {\n        monetary: {\n            unit: 'celo',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    comp: {\n        monetary: {\n            unit: 'comp',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    dash: {\n        monetary: {\n            unit: 'dash',\n        },\n        fractional: {\n            unit: 'duff',\n            decimalPlaces: 8,\n        },\n    },\n    dot: {\n        monetary: {\n            unit: 'dot',\n        },\n        fractional: {\n            unit: 'planck',\n            decimalPlaces: 10,\n        },\n    },\n    eth: {\n        monetary: {\n            unit: 'eth',\n        },\n        fractional: {\n            unit: 'wei',\n            decimalPlaces: 18,\n        },\n    },\n    grt: {\n        monetary: {\n            unit: 'grt',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    ksm: {\n        monetary: {\n            unit: 'ksm',\n        },\n        fractional: {\n            unit: 'planck',\n            decimalPlaces: 12,\n        },\n    },\n    ltc: {\n        monetary: {\n            unit: 'ltc',\n        },\n        fractional: {\n            unit: 'litoshi',\n            decimalPlaces: 8,\n        },\n    },\n    mkr: {\n        monetary: {\n            unit: 'mkr',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    nu: {\n        monetary: {\n            unit: 'nu',\n        },\n        fractional: {\n            unit: 'unknown',\n            decimalPlaces: -1,\n        },\n    },\n    xlm: {\n        monetary: {\n            unit: 'xlm',\n        },\n        fractional: {\n            unit: 'stroop',\n            decimalPlaces: 7,\n        },\n    },\n    xrp: {\n        monetary: {\n            unit: 'xrp',\n        },\n        fractional: {\n            unit: 'drop',\n            decimalPlaces: 6,\n        },\n    },\n    zec: {\n        monetary: {\n            unit: 'zec',\n        },\n        fractional: {\n            unit: 'zatoshi',\n            decimalPlaces: 8,\n        },\n    },\n};\n\nexport default class AssetTracker {\n    constructor(transactions, quotes) {\n        this.quotes = quotes;\n        this.transactions = transactions.sort(dateSorter);\n        this.earliestDate = moment(this.transactions[0].date);\n        this.latestDate = moment();\n        this.assets = [...new Set(this.transactions.map(tx => tx.asset))].sort();\n        this.balanceAtDate = (asset, date) => this.transactions\n            .filter(tx => ((tx.asset === asset) && (moment(tx.date) <= date)))\n            .reduce((accumulator, tx) => accumulator.plus(new BigNumber(tx.amount)), new BigNumber(0));\n        const interval = 1000 * 60 * 60 * 24; // one day\n        this.balances = Array.from(\n            { length: (((this.latestDate - this.earliestDate) / interval) + 1) },\n            (v, i) => new Date(this.earliestDate.valueOf() + (interval * i)).toISOString().slice(0, 10)\n        ).map(date => ({\n            // todo: filter out assets where balance is always zero\n            ...Object.fromEntries(this.assets.map(asset => {\n                const close = new Date(date);\n                close.setHours(23, 59, 59);\n                const balance = this.balanceAtDate(asset, close);\n                return [\n                    asset,\n                    {\n                        ...Object.fromEntries(quotes.filter(quote => ((quote.coin === asset) && (quote.date === date))).map(quote => [\n                            quote.fiat,\n                            balance.times(BigNumber(quote.open.amount).plus(BigNumber(quote.close.amount)).dividedBy(BigNumber(2))).decimalPlaces(2).toNumber() || BigNumber(0).toNumber()\n                        ])),\n                        [asset]: balance.toNumber(),\n                    }\n                ];\n            })),\n            date,\n        }));\n    }\n\n    static fromGist(gistId) {\n        return new Promise((resolve , reject) => {\n            fetch(`https://api.github.com/gists/${gistId}`)\n                .then((response) => response.json())\n                .then((gist) => {\n                    const transactions = Object.keys(gist.files)\n                        .filter(_filename => _filename.endsWith('.json'))\n                        .map(_filename => JSON.parse(gist.files[_filename].content))\n                        .reduce((accumulator, _transactions) => [...accumulator, ..._transactions])\n                        .filter(_transaction => Object.keys(coinUnitMap).includes(_transaction.asset))\n                        .sort(dateSorter);\n                    const earliestDate = transactions[0].date.slice(0, 10);\n                    const latestDate = moment().toISOString().slice(0, 10);\n                    appClient.auth\n                        .loginWithCredential(new AnonymousCredential())\n                        .then(() => {\n                            svcClient.db('grenade')\n                                .collection('quote')\n                                .find(\n                                    {\n                                        $and: [\n                                            {\n                                                coin: {\n                                                    $in: [...new Set(transactions.map(tx => tx.asset))]\n                                                }\n                                            },\n                                            {\n                                                date: {\n                                                    $gte: earliestDate\n                                                }\n                                            },\n                                            {\n                                                date: {\n                                                    $lte: latestDate\n                                                }\n                                            }\n                                        ]\n                                    }\n                                )\n                                .asArray()\n                                .then(quotes => {\n                                    resolve(new AssetTracker(transactions, quotes));\n                                });\n                        });\n                })\n                .catch((error) => {\n                    reject(error);\n                });          \n        });\n    }\n};","import React, { useState, useEffect } from 'react';\nimport Cookies from 'universal-cookie';\nimport moment from 'moment';\n\n// bootstrap\nimport Col from 'react-bootstrap/Col';\nimport Container from 'react-bootstrap/Container';\nimport Form from 'react-bootstrap/Form';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Row from 'react-bootstrap/Row';\nimport Table from 'react-bootstrap/Table';\n\n// recharts\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nimport AssetTracker from './AssetTracker';\n\nconst cookies = new Cookies();\nconst colors = {\n  bch: '#8dc351',\n  btc: '#f7931a',\n  dash: '#008ce7',\n  dot: '#e71081',\n  eth: '#444eec',\n  ksm: '#8015ab',\n  ltc: '#345d9d',\n  xlm: '#000000',\n  xrp: '#23292f',\n  zec: '#ecb244',\n  default: '#cccccc',\n};\n\nconst CustomToolTip = props => {\n  const { active, payload, label, currency } = props;\n  if (!active || !payload) {\n    return null;\n  }\n  return (\n    <div style={{\n      backgroundColor: '#ffffff',\n      padding: '1em',\n      border: '1px solid #cccccc',\n    }}>\n      <p>\n        <strong>{moment(label).format(\"MMMM Do, YYYY\").toLowerCase()}</strong>\n      </p>\n      {\n        payload.filter(x => x.value > 0).map((item) => (\n          <p key={item.name} style={{ color: (colors[item.name] || colors['default']) }}>\n            {item.name}: <strong>{Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(item.value)}</strong>\n          </p>\n        ))\n      }\n    </div>\n  );\n};\n\n\n\n\nfunction App() {\n  const [dateRange, setDateRange] = useState({ from: moment('2020-11-11').toISOString().slice(0, 10), to: moment().toISOString().slice(0, 10) });\n  const [currency, setCurrency] = useState(cookies.get('currency') || 'eur');\n  const [gistId, setGistId] = useState(window.location.href.match(/#[a-f0-9]{32}$/) ? window.location.href.split('#').pop() : cookies.get('gist'));\n  const [assetTracker, setAssetTracker] = useState(undefined);\n  useEffect(() => {\n    if(!!currency && currency.match(/^[a-z]{3}$/) && cookies.get('currency') !== currency) {\n      cookies.set('currency', currency, { path: '/' });\n    }\n  }, [currency]);\n  useEffect(() => {\n    if(!!gistId && gistId.match(/^[a-f0-9]{32}$/) && cookies.get('gist') !== gistId) {\n      cookies.set('gist', gistId, { path: '/' });\n    }\n  }, [gistId]);\n  useEffect(() => {\n    if (!!gistId && gistId.match(/^[a-f0-9]{32}$/)) {\n      AssetTracker\n        .fromGist(gistId)\n        .then(setAssetTracker)\n        .catch(console.error);\n    }\n  }, [gistId]);\n  return (\n    <Container fluid>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Navbar.Brand href=\"#\">don't panic</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n        </Nav>\n        <Form inline>\n          <Form.Control\n            type=\"text\"\n            style={{width: '7em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            value={dateRange.from}\n            onChange={\n              (event) => {\n                const from = event.target.value;\n                if (from.match(/^20[12][0-9]-[01][0-9]-[0123][0-9]$/)) {\n                  setDateRange(_dateRange => ({\n                    ..._dateRange,\n                    from\n                  }));\n                }\n              }\n            } />\n          <Form.Control\n            type=\"text\"\n            style={{width: '7em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            value={dateRange.to}\n            onChange={\n              (event) => {\n                const to = event.target.value;\n                if (to.match(/^20[12][0-9]-[01][0-9]-[0123][0-9]$/)) {\n                  setDateRange(_dateRange => ({\n                    ..._dateRange,\n                    to\n                  }));\n                }\n              }\n            } />\n          <Form.Control\n            type=\"text\"\n            placeholder=\"gist id\"\n            style={{width: '19em'}}\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={gistId}\n            onChange={\n              (event) => {\n                const gistId = event.target.value;\n                if (gistId.match(/^[a-f0-9]{32}$/)) {\n                  setGistId(gistId);\n                }\n              }\n            } />\n          <Form.Control\n            as=\"select\"\n            className=\"mr-sm-2\"\n            size=\"sm\"\n            disabled={true}\n            defaultValue={currency}\n            onChange={\n              (event) => {\n                const currency = event.target.value;\n                if (currency.match(/^[a-f]{3}$/)) {\n                  setCurrency(currency);\n                }\n              }\n            }>\n            <option>eur</option>\n            <option>usd</option>\n          </Form.Control>\n        </Form>\n      </Navbar>\n      <Row>\n        {\n          (!!assetTracker && !!assetTracker.balances.length)\n            ? (\n                <ResponsiveContainer width=\"100%\" minHeight=\"500px\">\n                  <LineChart\n                    data={assetTracker.balances.filter(balance => moment(balance.date).isBetween(moment(dateRange.from), moment(dateRange.to)))}\n                    margin={{ top: 50, right: 10, left: 10, bottom: 10 }} >\n                    <CartesianGrid strokeDasharray=\"3 3\" />\n                    <XAxis\n                      dataKey=\"date\"\n                      tick={{ fontSize: 11 }}\n                      tickFormatter={tick => moment(tick).format('MMM D').toLowerCase()} />\n                    <YAxis\n                      tick={{ fontSize: 11 }}\n                      tickFormatter={tick => new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(tick)} />\n                    <Tooltip content={<CustomToolTip />} currency={currency} />\n                    <Legend />\n                    {\n                      assetTracker.assets.map(asset => (\n                        <Line type=\"monotone\" name={`${asset}`} dataKey={`${asset}.${currency}`} dot={false} stroke={colors[asset] || colors['default']} key={asset} />\n                      ))\n                    }\n                  </LineChart>\n                </ResponsiveContainer>\n              )\n            : null\n        }\n      </Row>\n      <Row>\n        <Table striped bordered hover size=\"sm\" variant=\"dark\" style={{margin: '50px 10px 10px 10px'}}>\n          <thead>\n            <tr>\n              <th colspan=\"4\" className=\"text-right\">\n                transaction history\n              </th>\n            </tr>\n            <tr>\n              <th>\n                date\n              </th>\n              <th>\n                note\n              </th>\n              <th>\n                asset\n              </th>\n              <th className=\"text-right\">\n                amount\n              </th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              (!!assetTracker && !!assetTracker.transactions.length)\n                ? assetTracker.transactions.filter(transaction => moment(transaction.date).isBetween(moment(dateRange.from), moment(dateRange.to))).map((tx, key) => (\n                    <tr key={key}>\n                      <td>\n                        {tx.date}\n                      </td>\n                      <td>\n                        {tx.note}\n                      </td>\n                      <td>\n                        {tx.asset}\n                      </td>\n                      <td className=\"text-right\">\n                        {tx.amount}\n                      </td>\n                    </tr>\n                  ))\n                : null\n            }\n          </tbody>\n        </Table>\n      </Row>\n      <Row>\n        {\n          (!!assetTracker && !!assetTracker.balances.length)\n            ? (\n                <Table striped bordered hover size=\"sm\" variant=\"dark\" style={{margin: '50px 10px 10px 10px'}}>\n                  <thead>\n                    <tr>\n                      <th colspan={(assetTracker.assets.length + 2)} className=\"text-right\">\n                        balance history\n                      </th>\n                    </tr>\n                    <tr>\n                      <th>date</th>\n                      {\n                        assetTracker.assets.map(asset => (\n                          <th key={asset} className=\"text-right\">\n                            {asset}\n                          </th>\n                        ))\n                      }\n                      <th className=\"text-right\">total</th>\n                    </tr>\n                  </thead>\n                  <tbody>\n                    {\n                      assetTracker.balances.filter(balance => moment(balance.date).isBetween(moment(dateRange.from), moment(dateRange.to))).map((balance) => (\n                        <tr key={balance.date}>\n                          <th>{balance.date}</th>\n                          {\n                            assetTracker.assets.map(asset => (\n                              <td key={`${balance.date}-${asset}`} className=\"text-right\">\n                                <span className=\"text-muted\" style={{marginRight: '1em'}}>\n                                  {balance[asset][asset]}\n                                </span>\n                                {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(balance[asset][currency] || 0)}\n                              </td>\n                            ))\n                          }\n                          <td className=\"text-right\">\n                            {new Intl.NumberFormat('en-GB', { style: 'currency', currency: currency.toUpperCase() }).format(assetTracker.assets.reduce((acc, asset) => acc + (balance[asset][currency] || 0), 0))}\n                          </td>\n                        </tr>\n                      ))\n                    }\n                  </tbody>\n                </Table>\n              )\n            : null\n        }\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}